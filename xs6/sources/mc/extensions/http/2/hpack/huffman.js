export class HuffmanEncoder {
	constructor(table) {
		this.table = table;
		this.reset();
	}

	encode(str) {
		const bytes = new Uint8Array(ArrayBuffer.fromString(str));

		for (let c of bytes) {
			this.feed(c);
		}

		if (this.count > 0) {
			this.bytes.push((this.value << (8 - this.count)) | (0xff >> this.count));
		}

		const result = (new Uint8Array(this.bytes)).buffer;
		this.reset();
		return result;
	}

	reset() {
		this.count = 0;
		this.value = 0;
		this.bytes = [];
	}

	feed(index) {
		let [bits, count] = this.table[index];
		let value = this.value;

		const rest = 8 - this.count;
		const total = this.count + count;
		if (total < 8) {
			value = (value << count) | bits;
			this.count += count;
		} else {
			value = (value << rest) | (bits >> (total - 8));
			this.bytes.push(value);
			count -= rest;

			while (count >= 8) {
				count -= 8;
				this.bytes.push(bits >> count);
			}

			if (count > 0) {
				value = bits & (Math.pow(2, count) - 1);
			} else {
				value = 0;
			}

			this.count = count;
		}

		this.value = value;
	}

}

export class BitsShifter {
	constructor(blob) {
		this.bytes = new Uint8Array(blob);
		this.pos = 0;
		this.bit_pos = 0;
	}

	get bitsRemaining() {
		return (this.bytes.length - this.pos) * 8 - this.bit_pos;
	}

	peek(n) {
		let index = this.pos;
		let result = this.bytes[index++];

		if (this.bit_pos > 0) {
			result = ((result << this.bit_pos) & 0xff) >> this.bit_pos;
			n += this.bit_pos;
		}

		while (n > 8) {
			if (index >= this.bytes.length) return;

			result = (result << 8) | this.bytes[index++];
			n -= 8;
		}

		if (n > 0) {
			result >>= (8 - n);
		}

		return result;
	}

	shift(n) {
		if (this.bit_pos > 0) n += this.bit_pos;

		this.pos += (n / 8) | 0;
		this.bit_pos = n % 8;
		// if (this.bit_pos == 0) this.pos++;

		return this.bit_pos;
	}
}

export class HuffmanDecoder {
	constructor(table) {
		table = table.map(([bits, count], index) => [bits, count, index]);
		table.sort((a, b) => {
			if (a[1] < b[1]) return -1;
			if (a[1] > b[1]) return 1;
			return a[2] - b[2];
		});

		table = table.reduce(([t2, current], [bits, count, index]) => {
			if (current != count) {
				t2.push([count, []]);
			}
			const t3 = t2[t2.length - 1][1];
			t3.push([bits, index]);
			return [t2, count];
		}, [[], 0])[0];

		/*
		 table = [
		 	[5, [
		 		[0b11011, 68],
		 		[0b11011, 70],
		 		[0b11011, 71],
		 		...
		 	]],
		 	[6, [
		 		...
		 	]],
			...
			[30, [
				...
			]]
		 ]
		*/

		this.table = table;
		this.bytes = [];
		this.value = 0;
		this.count = 0;
	}

	decode(bytes) {
		const result = [];
		const shifter = new BitsShifter(bytes);

		while (shifter.bitsRemaining >= 5) {
			let index = this.findIndex(shifter);
			if (index === undefined) break;

			result.push(index);
		}
		return String.fromArrayBuffer((new Uint8Array(result)).buffer);
		// return 'www.example.com';
	}

	findIndex(shifter) {
		for (let [count, table] of this.table) {
			const value = shifter.peek(count);
			/* @BUG? I cannot write like this:

			for (let [bits, index] of table) {
				if (bits == value) {
					shifter.shift(count);
					return index;  // because index is undefined here
				}
			}
			 */
			for (let row of table) {
				let [bits, index] = row;
				if (bits == value) {
					shifter.shift(count);
					return index;
				}
			}
		}
	}

	get result() {
		if (this.count > 0) {
			this.bytes.push((this.value << (8 - this.count)) | (0xff >> this.count));
		}

		this.count = 0;
		this.value = 0;

		let bytes;
		[this.bytes, bytes] = [[], this.bytes];

		return String.fromArrayBuffer((new Uint8Array(bytes)).buffer);
	}
}

export const Huffman = {
	encode(str) {
		return this.encoder.encode(str);
	},

	decode(bytes) {
		return this.decoder.decode(bytes);
	},

	get encoder() {
		if (!this._encoder) {
			this._encoder = new HuffmanEncoder(this.table);
		}
		return this._encoder;
	},

	get decoder() {
		if (!this._decoder) {
			this._decoder = new HuffmanDecoder(this.table);
		}
		return this._decoder;
	},

	table: [
		/*       0 */ [0b1111111111000, 13],
		/*       1 */ [0b11111111111111111011000, 23],
		/*       2 */ [0b1111111111111111111111100010, 28],
		/*       3 */ [0b1111111111111111111111100011, 28],
		/*       4 */ [0b1111111111111111111111100100, 28],
		/*       5 */ [0b1111111111111111111111100101, 28],
		/*       6 */ [0b1111111111111111111111100110, 28],
		/*       7 */ [0b1111111111111111111111100111, 28],
		/*       8 */ [0b1111111111111111111111101000, 28],
		/*       9 */ [0b111111111111111111101010, 24],
		/*      10 */ [0b111111111111111111111111111100, 30],
		/*      11 */ [0b1111111111111111111111101001, 28],
		/*      12 */ [0b1111111111111111111111101010, 28],
		/*      13 */ [0b111111111111111111111111111101, 30],
		/*      14 */ [0b1111111111111111111111101011, 28],
		/*      15 */ [0b1111111111111111111111101100, 28],
		/*      16 */ [0b1111111111111111111111101101, 28],
		/*      17 */ [0b1111111111111111111111101110, 28],
		/*      18 */ [0b1111111111111111111111101111, 28],
		/*      19 */ [0b1111111111111111111111110000, 28],
		/*      20 */ [0b1111111111111111111111110001, 28],
		/*      21 */ [0b1111111111111111111111110010, 28],
		/*      22 */ [0b111111111111111111111111111110, 30],
		/*      23 */ [0b1111111111111111111111110011, 28],
		/*      24 */ [0b1111111111111111111111110100, 28],
		/*      25 */ [0b1111111111111111111111110101, 28],
		/*      26 */ [0b1111111111111111111111110110, 28],
		/*      27 */ [0b1111111111111111111111110111, 28],
		/*      28 */ [0b1111111111111111111111111000, 28],
		/*      29 */ [0b1111111111111111111111111001, 28],
		/*      30 */ [0b1111111111111111111111111010, 28],
		/*      31 */ [0b1111111111111111111111111011, 28],
		/* ' '  32 */ [0b010100,  6],
		/* '!'  33 */ [0b1111111000, 10],
		/* '"'  34 */ [0b1111111001, 10],
		/* '#'  35 */ [0b111111111010, 12],
		/* '$'  36 */ [0b1111111111001, 13],
		/* '%'  37 */ [0b010101,  6],
		/* '&'  38 */ [0b11111000,  8],
		/* '''  39 */ [0b11111111010, 11],
		/* '('  40 */ [0b1111111010, 10],
		/* ')'  41 */ [0b1111111011, 10],
		/* '*'  42 */ [0b11111001,  8],
		/* '+'  43 */ [0b11111111011, 11],
		/* ','  44 */ [0b11111010,  8],
		/* '-'  45 */ [0b010110,  6],
		/* '.'  46 */ [0b010111,  6],
		/* '/'  47 */ [0b011000,  6],
		/* '0'  48 */ [0b00000,  5],
		/* '1'  49 */ [0b00001,  5],
		/* '2'  50 */ [0b00010,  5],
		/* '3'  51 */ [0b011001,  6],
		/* '4'  52 */ [0b011010,  6],
		/* '5'  53 */ [0b011011,  6],
		/* '6'  54 */ [0b011100,  6],
		/* '7'  55 */ [0b011101,  6],
		/* '8'  56 */ [0b011110,  6],
		/* '9'  57 */ [0b011111,  6],
		/* ':'  58 */ [0b1011100,  7],
		/* ';'  59 */ [0b11111011,  8],
		/* '<'  60 */ [0b111111111111100, 15],
		/* '='  61 */ [0b100000,  6],
		/* '>'  62 */ [0b111111111011, 12],
		/* '?'  63 */ [0b1111111100, 10],
		/* '@'  64 */ [0b1111111111010, 13],
		/* 'A'  65 */ [0b100001,  6],
		/* 'B'  66 */ [0b1011101,  7],
		/* 'C'  67 */ [0b1011110,  7],
		/* 'D'  68 */ [0b1011111,  7],
		/* 'E'  69 */ [0b1100000,  7],
		/* 'F'  70 */ [0b1100001,  7],
		/* 'G'  71 */ [0b1100010,  7],
		/* 'H'  72 */ [0b1100011,  7],
		/* 'I'  73 */ [0b1100100,  7],
		/* 'J'  74 */ [0b1100101,  7],
		/* 'K'  75 */ [0b1100110,  7],
		/* 'L'  76 */ [0b1100111,  7],
		/* 'M'  77 */ [0b1101000,  7],
		/* 'N'  78 */ [0b1101001,  7],
		/* 'O'  79 */ [0b1101010,  7],
		/* 'P'  80 */ [0b1101011,  7],
		/* 'Q'  81 */ [0b1101100,  7],
		/* 'R'  82 */ [0b1101101,  7],
		/* 'S'  83 */ [0b1101110,  7],
		/* 'T'  84 */ [0b1101111,  7],
		/* 'U'  85 */ [0b1110000,  7],
		/* 'V'  86 */ [0b1110001,  7],
		/* 'W'  87 */ [0b1110010,  7],
		/* 'X'  88 */ [0b11111100,  8],
		/* 'Y'  89 */ [0b1110011,  7],
		/* 'Z'  90 */ [0b11111101,  8],
		/* '['  91 */ [0b1111111111011, 13],
		/* '\'  92 */ [0b1111111111111110000, 19],
		/* ']'  93 */ [0b1111111111100, 13],
		/* '^'  94 */ [0b11111111111100, 14],
		/* '_'  95 */ [0b100010,  6],
		/* '`'  96 */ [0b111111111111101, 15],
		/* 'a'  97 */ [0b00011,  5],
		/* 'b'  98 */ [0b100011,  6],
		/* 'c'  99 */ [0b00100,  5],
		/* 'd' 100 */ [0b100100,  6],
		/* 'e' 101 */ [0b00101,  5],
		/* 'f' 102 */ [0b100101,  6],
		/* 'g' 103 */ [0b100110,  6],
		/* 'h' 104 */ [0b100111,  6],
		/* 'i' 105 */ [0b00110,  5],
		/* 'j' 106 */ [0b1110100,  7],
		/* 'k' 107 */ [0b1110101,  7],
		/* 'l' 108 */ [0b101000,  6],
		/* 'm' 109 */ [0b101001,  6],
		/* 'n' 110 */ [0b101010,  6],
		/* 'o' 111 */ [0b00111,  5],
		/* 'p' 112 */ [0b101011,  6],
		/* 'q' 113 */ [0b1110110,  7],
		/* 'r' 114 */ [0b101100,  6],
		/* 's' 115 */ [0b01000,  5],
		/* 't' 116 */ [0b01001,  5],
		/* 'u' 117 */ [0b101101,  6],
		/* 'v' 118 */ [0b1110111,  7],
		/* 'w' 119 */ [0b1111000,  7],
		/* 'x' 120 */ [0b1111001,  7],
		/* 'y' 121 */ [0b1111010,  7],
		/* 'z' 122 */ [0b1111011,  7],
		/* '{' 123 */ [0b111111111111110, 15],
		/* '|' 124 */ [0b11111111100, 11],
		/* '}' 125 */ [0b11111111111101, 14],
		/* '~' 126 */ [0b1111111111101, 13],
		/*     127 */ [0b1111111111111111111111111100, 28],
		/*     128 */ [0b11111111111111100110, 20],
		/*     129 */ [0b1111111111111111010010, 22],
		/*     130 */ [0b11111111111111100111, 20],
		/*     131 */ [0b11111111111111101000, 20],
		/*     132 */ [0b1111111111111111010011, 22],
		/*     133 */ [0b1111111111111111010100, 22],
		/*     134 */ [0b1111111111111111010101, 22],
		/*     135 */ [0b11111111111111111011001, 23],
		/*     136 */ [0b1111111111111111010110, 22],
		/*     137 */ [0b11111111111111111011010, 23],
		/*     138 */ [0b11111111111111111011011, 23],
		/*     139 */ [0b11111111111111111011100, 23],
		/*     140 */ [0b11111111111111111011101, 23],
		/*     141 */ [0b11111111111111111011110, 23],
		/*     142 */ [0b111111111111111111101011, 24],
		/*     143 */ [0b11111111111111111011111, 23],
		/*     144 */ [0b111111111111111111101100, 24],
		/*     145 */ [0b111111111111111111101101, 24],
		/*     146 */ [0b1111111111111111010111, 22],
		/*     147 */ [0b11111111111111111100000, 23],
		/*     148 */ [0b111111111111111111101110, 24],
		/*     149 */ [0b11111111111111111100001, 23],
		/*     150 */ [0b11111111111111111100010, 23],
		/*     151 */ [0b11111111111111111100011, 23],
		/*     152 */ [0b11111111111111111100100, 23],
		/*     153 */ [0b111111111111111011100, 21],
		/*     154 */ [0b1111111111111111011000, 22],
		/*     155 */ [0b11111111111111111100101, 23],
		/*     156 */ [0b1111111111111111011001, 22],
		/*     157 */ [0b11111111111111111100110, 23],
		/*     158 */ [0b11111111111111111100111, 23],
		/*     159 */ [0b111111111111111111101111, 24],
		/*     160 */ [0b1111111111111111011010, 22],
		/*     161 */ [0b111111111111111011101, 21],
		/*     162 */ [0b11111111111111101001, 20],
		/*     163 */ [0b1111111111111111011011, 22],
		/*     164 */ [0b1111111111111111011100, 22],
		/*     165 */ [0b11111111111111111101000, 23],
		/*     166 */ [0b11111111111111111101001, 23],
		/*     167 */ [0b111111111111111011110, 21],
		/*     168 */ [0b11111111111111111101010, 23],
		/*     169 */ [0b1111111111111111011101, 22],
		/*     170 */ [0b1111111111111111011110, 22],
		/*     171 */ [0b111111111111111111110000, 24],
		/*     172 */ [0b111111111111111011111, 21],
		/*     173 */ [0b1111111111111111011111, 22],
		/*     174 */ [0b11111111111111111101011, 23],
		/*     175 */ [0b11111111111111111101100, 23],
		/*     176 */ [0b111111111111111100000, 21],
		/*     177 */ [0b111111111111111100001, 21],
		/*     178 */ [0b1111111111111111100000, 22],
		/*     179 */ [0b111111111111111100010, 21],
		/*     180 */ [0b11111111111111111101101, 23],
		/*     181 */ [0b1111111111111111100001, 22],
		/*     182 */ [0b11111111111111111101110, 23],
		/*     183 */ [0b11111111111111111101111, 23],
		/*     184 */ [0b11111111111111101010, 20],
		/*     185 */ [0b1111111111111111100010, 22],
		/*     186 */ [0b1111111111111111100011, 22],
		/*     187 */ [0b1111111111111111100100, 22],
		/*     188 */ [0b11111111111111111110000, 23],
		/*     189 */ [0b1111111111111111100101, 22],
		/*     190 */ [0b1111111111111111100110, 22],
		/*     191 */ [0b11111111111111111110001, 23],
		/*     192 */ [0b11111111111111111111100000, 26],
		/*     193 */ [0b11111111111111111111100001, 26],
		/*     194 */ [0b11111111111111101011, 20],
		/*     195 */ [0b1111111111111110001, 19],
		/*     196 */ [0b1111111111111111100111, 22],
		/*     197 */ [0b11111111111111111110010, 23],
		/*     198 */ [0b1111111111111111101000, 22],
		/*     199 */ [0b1111111111111111111101100, 25],
		/*     200 */ [0b11111111111111111111100010, 26],
		/*     201 */ [0b11111111111111111111100011, 26],
		/*     202 */ [0b11111111111111111111100100, 26],
		/*     203 */ [0b111111111111111111111011110, 27],
		/*     204 */ [0b111111111111111111111011111, 27],
		/*     205 */ [0b11111111111111111111100101, 26],
		/*     206 */ [0b111111111111111111110001, 24],
		/*     207 */ [0b1111111111111111111101101, 25],
		/*     208 */ [0b1111111111111110010, 19],
		/*     209 */ [0b111111111111111100011, 21],
		/*     210 */ [0b11111111111111111111100110, 26],
		/*     211 */ [0b111111111111111111111100000, 27],
		/*     212 */ [0b111111111111111111111100001, 27],
		/*     213 */ [0b11111111111111111111100111, 26],
		/*     214 */ [0b111111111111111111111100010, 27],
		/*     215 */ [0b111111111111111111110010, 24],
		/*     216 */ [0b111111111111111100100, 21],
		/*     217 */ [0b111111111111111100101, 21],
		/*     218 */ [0b11111111111111111111101000, 26],
		/*     219 */ [0b11111111111111111111101001, 26],
		/*     220 */ [0b1111111111111111111111111101, 28],
		/*     221 */ [0b111111111111111111111100011, 27],
		/*     222 */ [0b111111111111111111111100100, 27],
		/*     223 */ [0b111111111111111111111100101, 27],
		/*     224 */ [0b11111111111111101100, 20],
		/*     225 */ [0b111111111111111111110011, 24],
		/*     226 */ [0b11111111111111101101, 20],
		/*     227 */ [0b111111111111111100110, 21],
		/*     228 */ [0b1111111111111111101001, 22],
		/*     229 */ [0b111111111111111100111, 21],
		/*     230 */ [0b111111111111111101000, 21],
		/*     231 */ [0b11111111111111111110011, 23],
		/*     232 */ [0b1111111111111111101010, 22],
		/*     233 */ [0b1111111111111111101011, 22],
		/*     234 */ [0b1111111111111111111101110, 25],
		/*     235 */ [0b1111111111111111111101111, 25],
		/*     236 */ [0b111111111111111111110100, 24],
		/*     237 */ [0b111111111111111111110101, 24],
		/*     238 */ [0b11111111111111111111101010, 26],
		/*     239 */ [0b11111111111111111110100, 23],
		/*     240 */ [0b11111111111111111111101011, 26],
		/*     241 */ [0b111111111111111111111100110, 27],
		/*     242 */ [0b11111111111111111111101100, 26],
		/*     243 */ [0b11111111111111111111101101, 26],
		/*     244 */ [0b111111111111111111111100111, 27],
		/*     245 */ [0b111111111111111111111101000, 27],
		/*     246 */ [0b111111111111111111111101001, 27],
		/*     247 */ [0b111111111111111111111101010, 27],
		/*     248 */ [0b111111111111111111111101011, 27],
		/*     249 */ [0b1111111111111111111111111110, 28],
		/*     250 */ [0b111111111111111111111101100, 27],
		/*     251 */ [0b111111111111111111111101101, 27],
		/*     252 */ [0b111111111111111111111101110, 27],
		/*     253 */ [0b111111111111111111111101111, 27],
		/*     254 */ [0b111111111111111111111110000, 27],
		/*     255 */ [0b11111111111111111111101110, 26],
		// /* EOS 256 */ [0b111111111111111111111111111111, 30],
	]
};

export default Huffman;
