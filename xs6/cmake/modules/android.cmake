include (CMakeForceCompiler)

SET(ANDROID_NDK $ENV{ANDROID_NDK})
IF(NOT ANDROID_NDK)
	SET(ANDROID_NDK $ENV{NDK_DIR})
ENDIF()

SET(ANDROID_SDK $ENV{ANDROID_SDK})

IF(APPLE)
	SET(HOST_SYSTEM_NAME "darwin-x86_64")
	SET(HOST_SYSTEM_NAME2 "darwin-x86")
ELSEIF(WIN32)
	SET(HOST_SYSTEM_NAME "windows-x86_64")
	SET(HOST_SYSTEM_NAME2 "windows")
	SET(TOOL_OS_SUFFIX ".exe")
ELSEIF(UNIX)
	SET(HOST_SYSTEM_NAME "linux-x86_64")
	SET(HOST_SYSTEM_NAME2 "linux-x86")
ELSE()
	MESSAGE(FATAL_ERROR "Cross-compilation on your platform is not supported.")
ENDIF()

IF(CMAKE_VERSION VERSION_GREATER "3.0.99")
 SET(CMAKE_SYSTEM_NAME Android)
ELSE()
 SET(CMAKE_SYSTEM_NAME Linux)
ENDIF()

SET(CMAKE_SYSTEM_VERSION 1)

SET(CMAKE_SYSTEM_PROCESSOR "armv7-a")

SET(TOOLCHAINS_PATH "${ANDROID_NDK}/toolchains")
SET(TOOLCHAIN_SUBPATH  "prebuilt/${HOST_SYSTEM_NAME}")
SET(TOOLCHAIN_SUBPATH2 "prebuilt/${HOST_SYSTEM_NAME2}")

FILE(GLOB TOOLCHAINS RELATIVE ${TOOLCHAINS_PATH} "${TOOLCHAINS_PATH}/arm-linux-androideabi-*")
LIST(SORT TOOLCHAINS)

IF(NOT TOOLCHAIN)
	FOREACH(TOOLCHAIN ${TOOLCHAINS})
		STRING(FIND ${TOOLCHAIN} "-clang" INDEX)
		IF(INDEX GREATER -1)
			LIST(REMOVE_ITEM TOOLCHAINS ${TOOLCHAIN})
		ENDIF()
	ENDFOREACH()
	LIST(GET TOOLCHAINS -1 TOOLCHAIN)
ELSE()
	LIST(FIND TOOLCHAINS ${TOOLCHAIN} ITEM)
	IF(${ITEM} EQUAL -1)
		MESSAGE(FATAL_ERROR "${TOOLCHAIN} does not exist")
	ENDIF()
ENDIF()

SET(TOOLCHAIN_ROOT "${TOOLCHAINS_PATH}/${TOOLCHAIN}/${TOOLCHAIN_SUBPATH}")
IF(NOT EXISTS ${TOOLCHAIN_ROOT})
	SET(TOOLCHAIN_ROOT "${TOOLCHAINS_PATH}/${TOOLCHAIN}/${TOOLCHAIN_SUBPATH2}")
ENDIF()

SET(TOOLCHAIN_BIN ${TOOLCHAIN_ROOT}/bin)

STRING(REGEX MATCH "[0-9]+[.][0-9]+([.][0-9x]+)?$" COMPILER_VERSION ${TOOLCHAIN})
STRING(REGEX REPLACE "-${COMPILER_VERSION}$" "" TOOLCHAIN_NAME "${TOOLCHAIN}")

SET(NDK_PLATFORM_VER			"14")
SET(SYSROOT				"${ANDROID_NDK}/platforms/android-${NDK_PLATFORM_VER}/arch-arm")
SET(NDK_PLATFORM			"${SYSROOT}/usr/lib")
SET(NDK_TOOLCHAIN_VERSION		"${COMPILER_VERSION}")

CMAKE_FORCE_CXX_COMPILER(		"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-g++${TOOL_OS_SUFFIX}" GNU)
CMAKE_FORCE_C_COMPILER(			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-gcc${TOOL_OS_SUFFIX}" GNU)
SET(CMAKE_AR				"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-ar${TOOL_OS_SUFFIX}" CACHE PATH "archive")
SET(CMAKE_ASM_COMPILER			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-gcc${TOOL_OS_SUFFIX}" CACHE PATH "assembler")
SET(CMAKE_LINKER			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-ld${TOOL_OS_SUFFIX}" CACHE PATH "linker")
SET(CMAKE_NM				"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-nm${TOOL_OS_SUFFIX}" CACHE PATH "nm")
SET(CMAKE_OBJCOPY			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-objcopy${TOOL_OS_SUFFIX}" CACHE PATH "objcopy")
SET(CMAKE_OBJDUMP			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-objdump${TOOL_OS_SUFFIX}" CACHE PATH "objdump")
SET(CMAKE_RANLIB			"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-ranlib${TOOL_OS_SUFFIX}" CACHE PATH "ranlib")
SET(CMAKE_STRIP				"${TOOLCHAIN_BIN}/${TOOLCHAIN_NAME}-strip${TOOL_OS_SUFFIX}" CACHE PATH "strip")

SET(CMAKE_ASM_SOURCE_FILE_EXTENSIONS	"gas7;gas;s")
SET(CMAKE_ASM_COMPILE_OBJECT		"${CMAKE_C_COMPILER} -c -x assembler-with-cpp -c -march=armv7-a <FLAGS> -o <OBJECT> <SOURCE>")
SET(AS_NEON_OPTIONS			"-mfpu=neon")
SET(AS_WMMX_OPTIONS			"-mwmmxt")

SET(NDK_PLAY_PATH			"${F_HOME}/build/android/inNDK")

SET(NDK_PROJECT_PATH			"${TMP_DIR}/ndk/project")
SET(NDK_PROJECT_BIN			"${NDK_PROJECT_PATH}/bin")
SET(NDK_PROJECT_GEN			"${NDK_PROJECT_PATH}/gen")
SET(NDK_PROJECT_LIBRARIES		"${NDK_PROJECT_PATH}/libs/armeabi")
SET(NDK_PROJECT_OBJECTS			"${NDK_PROJECT_PATH}/obj/local/armeabi")

SET(SEPARATE_LIBRARIES			"${TOOLCHAIN_ROOT}lib/gcc/${TOOLCHAIN_NAME}/${COMPILER_VERSION}/libgcc.a -L${ANDROID_NDK})/${NDK_PLATFORM} -lc -lstdc++ -lm ${NDK_PROJECT_PATH}/libs/armeabi/libFsk.so -ldl -llog")
SET(SEPARATE_DIR			"${NDK_PROJECT_LIBRARIES}")

SET(FREETYPE_VERSION			"2.6")
SET(FREETYPE_DIR			"${TMP_DIR}/freetype-${FREETYPE_VERSION}")
SET(FREETYPE_PLATFORM_C_OPTIONS		"--sysroot=${SYSROOT}")

SET(SEPARATE_LINK_OPTIONS "-nostdlib -Wl,-shared,-Bsymbolic -Wl,--whole-archive -Wl,--fix-cortex-a8 -Wl,-rpath-link=$(NDK_PLATFORM)")
IF(NOT RELEASE)
	SET(SEPARATE_LINK_OPTIONS "${SEPARATE_LINK_OPTIONS} -g")
ENDIF()
SET(SEPARATE_LIBRARIES "${TOOLCHAIN_ROOT}/lib/gcc/${TOOLCHAIN_NAME}/${COMPILER_VERSION}/libgcc.a -L${SYSROOT}/usr/lib -lc -lstdc++ -lm -ldl -llog -landroid")

SET(CMAKE_CXX_CREATE_SHARED_LIBRARY	"<CMAKE_CXX_COMPILER> -Wl,-soname,<TARGET_SONAME> <OBJECTS> ${SEPARATE_LINK_OPTIONS} <LINK_LIBRARIES> ${SEPARATE_LIBRARIES} -o <TARGET>")
