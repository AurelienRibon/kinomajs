<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <require id="ExtensionManager" path="ExtensionManager"/>
    
    <function id="newInstance" params="pathList, temporaryUploadPath">
        <![CDATA[
            return new ApplicationManager( pathList, temporaryUploadPath );
        ]]>
    </function>
    
    <class id="ApplicationManager" like="ExtensionManager">
        <constructor params="pathList, temporaryUploadPath">
            <![CDATA[
                ExtensionManager.ExtensionManager.call( this, pathList, temporaryUploadPath );
            ]]>
        </constructor>
        
        <method id="getExtensionFilename">
            <![CDATA[
                return "application.xml";
            ]]>
        </method>
        
        <method id="createExtensionInfo" params="extension, url, temporary">
            <![CDATA[
                return new ApplicationInfo( extension, url, temporary );
            ]]>
        </method>
        
        <method id="createApplicationContainer" params="application, breakOnStart, breakOnExceptions">
            <![CDATA[
                var bounds = null;
                
                if( application.width != null && application.height != null )
                    bounds = {width: application.width, height: application.height};
                else
                    bounds = {left:0, top:0, right:0, bottom:0};
                    
                return new Host( bounds, ExtensionManager.getRuntimeModulePath( application.program ), application.id, breakOnStart, breakOnExceptions );
            ]]>
        </method>
    </class>
    
    <class id="ApplicationInfo" like="ExtensionManager.ExtensionInfo">
        <field id="width"/>
        <field id="height"/>
        <field id="background"/>
        <field id="program"/>
        <field id="manifest"/>
        <field id="temporary"/>
        <field id="icon"/>
        <field id="environment"/>
        
        <constructor params="application, url, temporary">
            <![CDATA[
                this.width = application.width;
                this.height = application.height;
                this.background = application.background;
                this.program = mergeURI( url, application.program );
                this.temporary = temporary;
				this.icon = application.icon != null ? mergeURI( url, application.icon ) : null;
                this.environment = {};
                
                // call super constructor
                ExtensionManager.ExtensionInfo.call( this, application, url );
                
                // load the configuration data
                this.loadManifest();
            ]]>
        </constructor>
        <method id="loadManifest">
            <![CDATA[
		        var manifestFile = mergeURI( this.url, ".manifest" );
		        
		        if( Files.exists( manifestFile ) != null )
		        {
		            this.manifest = JSON.parse( Files.readText( manifestFile ) );

		            if( "env" in this.manifest )
		                this.environment = this.manifest.env;
		        }
            ]]>
        </method>
    </class>
    
    <script>
        <![CDATA[
            var manifest = new Object();
            
            manifest.application = Object.create( Object.prototype, {
                id: { configurable: true, enumerable: false, writable: true, value: null },
                program: { configurable: true, enumerable: false, writable: true, value: null },
                title: { configurable: true, enumerable: false, writable: true, value: null },
                icon: { configurable: true, enumerable: false, writable: true, value: null },
                width: { configurable: true, enumerable: false, writable: true, value: null },
                height: { configurable: true, enumerable: false, writable: true, value: null },
                background: { configurable: true, enumerable: false, writable: true, value: null },
                version: { configurable: true, enumerable: false, writable: true, value: null }
            });

            var g = new Grammar();
            
            g.namespace( "http://www.kinoma.com/kpr/application/1", "kpr" );
            g.object( manifest.application, "/kpr:application", {
                id: g.string("@id"),
                program: g.string("@program"),
                title: g.string("@title"),
                icon: g.string("@icon"),
                width: g.string("@width"),
                height: g.string("@height"),
                background: g.string("@background"),
                version: g.string("@version")
            });
            
            g.link();
        ]]>
    </script>
    
</module>
