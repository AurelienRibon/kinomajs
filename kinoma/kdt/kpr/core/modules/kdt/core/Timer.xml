<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <variable id="INITIALIZED" value="'initialized'"/>
    <variable id="RUNNING" value="'running'"/>
    <variable id="COMPLETE" value="'complete'"/>

    <function id="getTime">
        <![CDATA[
           return new Date().getTime(); 
        ]]>
    </function>
    
    <function id="createCallback" params="func, encl">
        <![CDATA[
           return new TimerCallback( func, encl ); 
        ]]>
    </function>
    
    <function id="newInstance" params="duration, count, callback">
        <![CDATA[
            return new Timer( duration, count, callback );
        ]]>
    </function>

    <class id="Timer">
        <field id="status"/>
        <field id="host"/>
        <field id="executor"/>
        <field id="duration"/>
        <field id="count"/>
        <field id="callback"/>
        <field id="startTime"/>
        <field id="lastTickTime"/>
        <field id="numTicks"/>
        
        <constructor params="duration, count, callback">
            <![CDATA[
                this.status = INITIALIZED;
                this.executor = null;
                this.duration = duration;
                this.count = count;
                this.callback = typeof callback == "function" ? createCallback( callback ) : callback;
                this.startTime = -1;
                this.lastTickTime = -1;
                this.numTicks = -1;
            ]]>
        </constructor>
        
        <method id="start" params="host">
            <![CDATA[
                if( this.status == INITIALIZED )
                {
                    this.host = host != null ? host : (shell != null ? shell : application);

                    if( this.host == null )
                       throw new Error( "Timer could not be executed because no valid host was specified!" );

                    // initialize the timer
                    this.status = RUNNING;
                    this.startTime = getTime();
                    this.lastTickTime = -1;
                    this.numTicks = 0;
                
                    // create the executor
                    this.executor = new Content();
                    this.executor.behavior = this;
                    
                    // add the executor to the shell
                    this.host.add( this.executor );
                    
                    // set up executor timer properties
                    this.executor.time = 0;
                    this.executor.interval = this.duration;
                    this.executor.start();
                }
            ]]>
        </method>
        
        <method id="stop">
            <![CDATA[
                if( this.status == RUNNING )
                {
                    this.status = COMPLETE;
                    
                    this.executor.stop();
                
                    this.host.remove( this.executor );
                    
                    //trace( "### Timer Complete: start=" + this.startTime + " last=" + this.lastTickTime + " > " + (this.lastTickTime - this.startTime) + "\n" );
                }
            ]]>
        </method>
        
        <method id="getTickCount">
            <![CDATA[
                return this.numTicks;
            ]]>
        </method>
        
        <method id="onTimeChanged">
            <![CDATA[
                if( this.status == RUNNING )
                {
                    this.lastTickTime = getTime();
                    this.numTicks++;
                    
                    //trace( "### Tick (" + this.numTicks + "): " + this.lastTickTime + "\n" );                

                    if( this.callback != null )
                       this.callback.call( [this] );

                    if( this.count > 0 && this.numTicks >= this.count )
                        this.executor.stop();
                }
            ]]>
        </method>
    </class>

    <class id="TimerCallback">
        <field id="func"/>
        <field id="encl"/>
        
        <constructor params="func, encl">
            <![CDATA[
                this.func = func;
                this.encl = encl;
            ]]>
        </constructor>
        
        <method id="call" params="args">
            <![CDATA[
                this.func.apply( this.encl, args );
            ]]>
        </method>
    </class>
    
</module>