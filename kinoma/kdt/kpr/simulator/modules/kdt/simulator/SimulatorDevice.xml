<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">
    
    <require id="DeviceManager" path="DeviceManager"/>

    <function id="newInstance" params="info">
        <![CDATA[
            return new SimulatorDevice( info );
        ]]>
    </function>

    <class id="SimulatorDevice">
        <field id="info"/>
        <field id="variationList"/>
        <field id="eventList"/>
        <field id="orientationList"/>
        <field id="layer"/>
        
        <constructor params="info">
            <![CDATA[
                this.info = info;
                this.variationList = new Array();
                this.eventList = new Array();
                this.layer = null;

                this.initialize();
            ]]>
        </constructor>
        
        <method id="initialize">
            <![CDATA[
                // add the default variation if the skin and screen elements are defined
                // in the root device element...
                var deviceMockupList = this.info.extension.mockups;
            
                if( deviceMockupList.length > 0 )
                    this.addVariation( new DeviceVariationInfo( {id:"__default__",title:this.info.title,mockups:deviceMockupList} ) );
            
                // add variations that are defined in the device element
                var variationList = this.info.extension.variations;
                
                for( var j = 0; j < variationList.length; j++ )
                    this.addVariation( new DeviceVariationInfo( variationList[j] ) );
                
                // add events that are defined in the device element
                var eventList = this.info.extension.events;

                for( var j = 0; j < eventList.length; j++ )
                    this.eventList.push( new Event( eventList[j].id, eventList[j].title, eventList[j].key, eventList[j].data, eventList[j].description ) );
               
                // create the orientations list
                if( this.info.extension.orientations != null )
                {
                    var orientationList = this.info.extension.orientations.split( "," );
                    var supportedOrientations = new Array();
                    
                    for( var j = 0; j < orientationList.length; j++ )
                    {
                        if( DeviceManager.isOrientationSupported( orientationList[j] ) )
                            supportedOrientations.push( orientationList[j] );
                    }
                    
                    this.orientationList = supportedOrientations;
                }
            ]]>
        </method>
        
        <method id="addVariation" params="variation">
            <![CDATA[
                this.variationList.push( variation );
            ]]>
        </method>
        
        <method id="getVariationCount">
            <![CDATA[
                return this.variationList.length;
            ]]>
        </method>
        
        <method id="getVariationById" params="id">
            <![CDATA[
                var variation = null;
            
                for( var j = 0; j < this.variationList.length; j++ )
                {
                    if( id == this.variationList[j].id ) {
                        variation = this.variationList[j];
                        break;
                    }
                }
            
                return variation;
            ]]>
        </method>
        
        <method id="getVariationByIndex" params="index">
            <![CDATA[
                return this.variationList[index];
            ]]>
        </method>
        
        <method id="getDefaultVariation">
            <![CDATA[
                return this.variationList[0];
            ]]>
        </method>
        
        <method id="getTouchMode">
            <![CDATA[
                return this.info.extension.touch;
            ]]>
        </method>
        
        <method id="isKeyboardEnabled">
            <![CDATA[
                return this.info.extension.keyboard;
            ]]>
        </method>        
        
        <method id="isTouchSupported">
            <![CDATA[
                return this.getTouchMode() == DeviceManager.SINGLE || this.info.extension.touch == DeviceManager.MULTI;
            ]]>
        </method>
        
        <method id="isOrientationSupported" params="orientation">
            <![CDATA[
                var supported = false;
                
                if( this.orientationList != null )
                {
                    for( var j = 0; j < this.orientationList.length; j++ )
                    {
                        if( this.orientationList[j] == orientation ) {
                            supported = true;
                            break;
                        }
                    }
                }
                else
                    supported = true;
            
                return supported;
            ]]>
        </method>
        
        <method id="isRotationSupported">
            <![CDATA[
                return this.orientationList == null || this.orientationList.length > 1;
            ]]>
        </method>
        
        <method id="getMappedOrientation" params="orientation">
            <![CDATA[
                if( this.isRotationSupported() )
                    return orientation != null ? orientation : DeviceManager.VERTICAL;
                else
                    return this.orientationList[0];    
            ]]>
        </method>
        
        <method id="createDeviceContainer" params="variation, orientation">
            <![CDATA[
                return this.createDeviceContainerContent( {device:this,variation:(variation != null ? variation : this.getDefaultVariation()),orientation:this.getMappedOrientation( orientation )} ); 
            ]]>
        </method>
        
        <method id="createDeviceContainerContent" params="data">
            <![CDATA[
                return new DeviceContainer( data );
            ]]>
        </method>
        
        <method id="getEvents">
            <![CDATA[
                return this.eventList;
            ]]>
        </method>
    </class>

    <!-- export the main prototype -->
    <variable id="prototype" value="SimulatorDevice.prototype"/>

    <class id="DeviceMockupInfo">
        <field id="data"/>
        <field id="background"/>
        <field id="screen"/>
        
        <constructor params="data">
            <![CDATA[
                this.data = data;
                this.initialize();
            ]]>
        </constructor>
        
        <method id="initialize">
            <![CDATA[
                // initialize the device variation skin
                if( this.data.backgrounds.length > 0 )
                    this.background = new DeviceBackgroundInfo( this.data.backgrounds[0] );
                    
                // initialize the device screen info
                if( this.data.screens.length > 0 )
                    this.screen = new DeviceScreenInfo( this.data.screens[0] );
            ]]>
        </method>
    </class>

    <class id="DeviceVariationInfo">
        <field id="data"/>
        <field id="id"/>
        <field id="title"/>
        <field id="mockup"/>
        
        <constructor params="data">
            <![CDATA[
                this.data = data;
                this.initialize();
            ]]>
        </constructor>
        
        <method id="initialize">
            <![CDATA[
                this.id = this.data.id;
                this.title = this.data.title;
            
                // initialize the device variation skin
                if( this.data.mockups.length > 0 )
                    this.mockup = new DeviceMockupInfo( this.data.mockups[0] );
            ]]>
        </method>
    </class>
    
    <class id="DeviceBackgroundInfo">
        <field id="data"/>
        <field id="src"/>
        <field id="width"/>
        <field id="height"/>
        
        <constructor params="data">
            <![CDATA[
                this.data = data;
                this.initialize();
            ]]>
        </constructor>
        
        <method id="initialize">
            <![CDATA[
                this.src = this.data.src;
                this.width = this.data.width;
                this.height = this.data.height;
            ]]>
        </method>
    </class>
    
    <class id="DeviceScreenInfo">
        <field id="data"/>
        <field id="x"/>
        <field id="y"/>
        <field id="width"/>
        <field id="height"/>
        
        <constructor params="data">
            <![CDATA[
                this.data = data;
                this.initialize();
            ]]>
        </constructor>
        
        <method id="initialize">
            <![CDATA[
                this.x = this.data.x;
                this.y = this.data.y;
                this.width = this.data.width;
                this.height = this.data.height;
            ]]>
        </method>
    </class>
    
    <class id="Event">
        <field id="id"/>
        <field id="title"/>
        <field id="key"/>
        <field id="data"/>
        <field id="description"/>
        <field id="enabled"/>
        <field id="check"/>
        
        <constructor params="id, title, key, data, description, enabled, check">
            <![CDATA[
                this.id = id;
                this.title = title;
                this.key = key;
                this.data = data;
                this.description = description;
                this.enabled = enabled;
                this.check = check;
            ]]>
        </constructor>
    </class>
    
    <skin id="DEFAULT_SCREEN_SKIN" color="#333333"/>
    <container id="DeviceContainer" behavior="DeviceBehavior"/>
    <container id="DeviceScreenContainer" top="$.top" left="$.left" width="$.width" height="$.height" skin="DEFAULT_SCREEN_SKIN"/>

    <behavior id="DeviceBehavior">
        <field id="container" />
        <field id="device" />
        <field id="variation" />
        <field id="orientation" />
        <field id="backgroundContainer" />
        <field id="backgroundTextureMap" />
        <field id="backgroundOrigin" />
        <field id="screen" />
        <field id="keyboard" />
    
        <method id="onCreate" params="content, $">
            <![CDATA[
                this.container = content;
                this.device = $.device;
                this.variation = $.variation;
                this.orientation = $.orientation;
                this.backgroundTextureMap = new Object();
                this.backgroundOrigin = null;
                
                // if the device allows a keyboard then create it now
                if( this.device.isKeyboardEnabled() )
                    this.keyboard = this.createKeyboard();
                
                this.createContent();
            ]]>
        </method>
        <method id="getContainer">
            <![CDATA[
                return this.container;
            ]]>
        </method>
        <method id="getApplicationContainer">
            <![CDATA[
                return this.screen;
            ]]>
        </method>
        <method id="createContent">
            <![CDATA[
                // remove the old background container if one exists
                if( this.backgroundContainer != null ) 
                {
                    this.getContainer().remove( this.backgroundContainer );
                    this.backgroundContainer = null;    
                }    
            
                // create the new background container and screen and add it to the
                // device simulator container...
                this.backgroundContainer = this.createBackground();

                this.screen = this.createDeviceScreen();
                this.screen.clip = true;

                this.backgroundContainer.add( this.screen );

                this.getContainer().add( this.backgroundContainer );
                
                this.addContentToContainer( this.getContainer() );
            ]]>
        </method>
        
        <method id="createKeyboard">
           <![CDATA[
              return require( "Keyboard" );
           ]]>
        </method>
        
        <method id="addContentToContainer" params="container"/>

        <method id="createBackground">
            <![CDATA[
                var background = new Container( null, this.createDeviceSkin() );
            
                this.addContentToBackground( background );
            
                return background;
            ]]>
        </method>
        
        <method id="addContentToBackground" params="background"/>

        <method id="createDeviceSkin">
            <![CDATA[
                var mockupInfo = this.variation.mockup;
                var backgroundInfo = mockupInfo.background;
                var skin = null;
            
                if( backgroundInfo != null )
                {
                    var texture = this.createBackgroundTexture();
                    
                    if( texture != null )
                        skin = new Skin( texture, {x:0, y:0, width:texture.width, height:texture.height} );
                }
                
                return skin;
            ]]>
        </method>
        
        <method id="createDeviceScreen">
            <![CDATA[
                var mockupInfo = this.variation.mockup;
                var screenInfo = mockupInfo.screen;
                
                if( screenInfo != null )
                {
                    var screenRect = {left:screenInfo.x, top:screenInfo.y, width:screenInfo.width, height:screenInfo.height};
                    
                    if( this.orientation != DeviceManager.VERTICAL )
                        screenRect = this.getRotatedScreenRect( screenRect, this.backgroundOrigin.x, this.backgroundOrigin.y, DeviceManager.getRotation( this.orientation ) );
                            
                    return this.createDeviceScreenContainer( screenRect );
                }
                else
                    return this.createDeviceScreenContainer( {left:0, top:0, right:0, bottom:0} );
            ]]>
        </method>
        <method id="createDeviceScreenContainer" params="bounds">
            <![CDATA[
                return new DeviceScreenContainer( bounds );
            ]]>
        </method>

        <method id="getRotatedScreenRect" params="rect, originX, originY, angle">
            <![CDATA[
                var bg = this.backgroundTextureMap[this.orientation];
                var x = bg.width / 2;
                var y = bg.height / 2;
                var center = this.getRotatedPoint( rect.left + (rect.width / 2), rect.top + (rect.height / 2), originX, originY, angle );
                var tr = {left:center.x + ((bg.width / 2) - originX) - (rect.width / 2), top:center.y + ((bg.height / 2) - originY) - (rect.height / 2), width:rect.width, height:rect.height};
                
                center = {x:tr.left + (tr.width / 2), y:tr.top + (tr.height / 2)};
                
                var p1 = this.getRotatedPoint( tr.left, tr.top, center.x, center.y, angle );
                var p2 = this.getRotatedPoint( tr.left + tr.width, tr.top, center.x, center.y, angle );
                var p3 = this.getRotatedPoint( tr.left + tr.width, tr.top + tr.height, center.x, center.y, angle );
                var p4 = this.getRotatedPoint( tr.left, tr.top + tr.height, center.x, center.y, angle );
                var tl = {x:this.getMinValue( [p1.x,p2.x,p3.x,p4.x] ),y:this.getMinValue( [p1.y,p2.y,p3.y,p4.y] )};
                var br = {x:this.getMaxValue( [p1.x,p2.x,p3.x,p4.x] ),y:this.getMaxValue( [p1.y,p2.y,p3.y,p4.y] )};

                var rotatedRect = {left:Math.round( tl.x ), top:Math.round( tl.y ), width:Math.round( br.x - tl.x ), height:Math.round( br.y - tl.y )};

                //trace( "### rotated screen rect (" + angle + "): left=" + rotatedRect.left + ",top=" + rotatedRect.top + ",width=" + rotatedRect.width + ",height=" + rotatedRect.height + "\n" );

                return rotatedRect;
            ]]>
        </method>
        
        <method id="getRotatedPoint" params="pointX, pointY, originX, originY, angle">
            <![CDATA[
                var angleInRadians = angle * (Math.PI / 180);
                var x = Math.cos( angleInRadians ) * (pointX - originX) - Math.sin( angleInRadians ) * (pointY - originY) + originX;
                var y = Math.sin( angleInRadians ) * (pointX - originX) + Math.cos( angleInRadians ) * (pointY - originY) + originY;
                
                return {x:x,y:y};
            ]]>
        </method>
        
        <method id="getMinValue" params="values">
            <![CDATA[
                var min = null;
                
                for( var j = 0; j < values.length; j++ )
                    min = min != null ? Math.min( min, values[j] ) : values[j];
                
                return min;
            ]]>
        </method>
        
        <method id="getMaxValue" params="values">
            <![CDATA[
                var max = null;
                
                for( var j = 0; j < values.length; j++ )
                    max = max != null ? Math.max( max, values[j] ) : values[j];
                
                return max;
            ]]>
        </method>
        
        <method id="createBackgroundTexture">
            <![CDATA[
                var texture = null;

                if( this.orientation in this.backgroundTextureMap )
                    texture = this.backgroundTextureMap[this.orientation];
                else
                {
                    var mockupInfo = this.variation.mockup;
                    var backgroundInfo = mockupInfo.background;
                    var src = new Texture( mergeURI( this.device.info.url, backgroundInfo.src ) );

                    // set the background origin coordinates
                    this.backgroundOrigin = {x:src.width / 2,y:src.height / 2};

                    if( this.orientation == null || this.orientation == DeviceManager.VERTICAL )
                        texture = src;
                    else
                    {
                        var width = this.orientation == DeviceManager.UPSIDE_DOWN ? src.width : src.height;
                        var height = this.orientation == DeviceManager.UPSIDE_DOWN ? src.height : src.width;
                        var canvas = new Canvas( {width:width,height:height} );
                        var ctx = canvas.getContext( "2d" );
                        var rot = DeviceManager.getRotation( this.orientation );
                        var angleInRadians = rot * (Math.PI / 180);
                        var x = this.orientation == DeviceManager.HORIZONTAL_LEFT || this.orientation == DeviceManager.UPSIDE_DOWN ? 1 : 0;
                        var y = this.orientation == DeviceManager.HORIZONTAL_RIGHT || this.orientation == DeviceManager.UPSIDE_DOWN ? 1 : 0;

                        ctx.translate( canvas.width / 2, canvas.height / 2 );
                        ctx.rotate( angleInRadians );
                        ctx.translate( -this.backgroundOrigin.x, -this.backgroundOrigin.y );
                        ctx.drawImage( src, x, y, src.width, src.height );
                        
                        texture = new Texture( canvas, 1, 1 );
                    }
                        
                    this.backgroundTextureMap[this.orientation] = texture;
                }
                
                return texture;
            ]]>
        </method>
       
        <method id="getEvents">
            <![CDATA[
                return null;
            ]]>
        </method>
        
        <method id="handleUpdateEvent" params="content, event"/>

        <method id="handleSelectEvent" params="content, event">
            <![CDATA[
                this.dispatchApplicationEvent( event );
            ]]>
        </method>
        
        <method id="handleSetOrientation" params="content, orientation, application">
            <![CDATA[
                if( this.device.isOrientationSupported( orientation ) )
                {
                    this.orientation = this.device.getMappedOrientation( orientation );
                    
                    if( application != null )
                    {
                        application.rotating = true;
                    
                        this.removeApplicationFromScreen( application );
                    }
                    
                    this.createContent();
                    
                    if( application != null )
                    {
                        this.addApplicationToScreen( application );
                        
                        application.rotating = false;
                        application.adapt();
                    }
                }
            ]]>
        </method>
        
        <method id="addApplicationToScreen" params="application">
            <![CDATA[
                this.getApplicationContainer().add( application );
            ]]>
        </method>
        
        <method id="removeApplicationFromScreen" params="application">
            <![CDATA[
                this.getApplicationContainer().remove( application );
            ]]>
        </method>
        
        <method id="handleRotateLeft" params="content, application">
            <![CDATA[
                var orientation = null;
                var current = this.orientation;
               
                while( orientation == null )
                {
                    switch( current )
                    {
                       case DeviceManager.VERTICAL:
                           current = DeviceManager.HORIZONTAL_LEFT;
                           break;
                       case DeviceManager.HORIZONTAL_LEFT:
                           current = DeviceManager.UPSIDE_DOWN;
                           break;
                       case DeviceManager.UPSIDE_DOWN:
                           current = DeviceManager.HORIZONTAL_RIGHT;
                           break;
                       case DeviceManager.HORIZONTAL_RIGHT:
                           current = DeviceManager.VERTICAL;
                           break;
                    }
                    
                    if( current == this.orientation || this.device.isOrientationSupported( current ) )
                       orientation = current;
                }
            
                if( orientation != this.orientation )
                    this.handleSetOrientation( content, orientation, application );
            ]]>
        </method>
        
        <method id="handleRotateRight" params="content, application">
            <![CDATA[
                var orientation = null;
                var current = this.orientation;
               
                while( orientation == null )
                {
                    switch( current )
                    {
                       case DeviceManager.VERTICAL:
                           current = DeviceManager.HORIZONTAL_RIGHT;
                           break;
                       case DeviceManager.HORIZONTAL_LEFT:
                           current = DeviceManager.VERTICAL;
                           break;
                       case DeviceManager.UPSIDE_DOWN:
                           current = DeviceManager.HORIZONTAL_LEFT;
                           break;
                       case DeviceManager.HORIZONTAL_RIGHT:
                           current = DeviceManager.UPSIDE_DOWN;
                           break;
                    }
                    
                    if( current == this.orientation || this.device.isOrientationSupported( current ) )
                       orientation = current;
                }
            
                if( orientation != this.orientation )
                    this.handleSetOrientation( content, orientation, application );
            ]]>
        </method>
        
        <method id="dispatchApplicationEvent" params="event">
            <![CDATA[
                var application = shell.delegate( "getSelectedApplication" );
                
                if( application != null )
                    shell.invoke( new Message( "xkpr://" + application.id + "/handleEvent?id=" + event.id + "&data=" + event.data ) );
            ]]>
        </method>
        
        <method id="handleShellMessage" params="content, message" />
        
        <method id="handleSetSystemKeyboardVisible" params="content, visible">
            <![CDATA[
                if( this.keyboard != null )
                  this.keyboard.show( visible, this.getApplicationContainer() );
            ]]>
        </method>
        
        <method id="handleGetSystemKeyboardVisible" params="content">
            <![CDATA[
                return this.keyboard != null && this.keyboard.isShown();
            ]]>
        </method>
        
    </behavior>

</module>
