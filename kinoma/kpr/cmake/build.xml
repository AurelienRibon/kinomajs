<!--
     Copyright (C) 2010-2015 Marvell International Ltd.
     Copyright (C) 2002-2010 Kinoma, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<project basedir="." default="main" name="kpr">
	<property name="fsk.application" value="KPR_CONFIG" />

	<if>
		<not>
			<isset property="app.name" />
		</not>
		<then>
			<property name="fsk.manifest" value="${f_home}/kinoma/kpr/applications/balls/manifest.xml" />

			<propertyregex  property="app.name"
					input="${fsk.manifest}"
					regexp=".*/([^/]*)/manifest.xml"
					select="\1"
					defaultValue="undefined" />
		</then>
		<else>
			<property name="fsk.manifest" value="${f_home}/kinoma/kpr/applications/${app.name}/manifest.xml" />
		</else>
	</if>

	<property name="fsk.manifest.absolute" location="${fsk.manifest}" />

	<dirname property="kpr.application.path" file="${fsk.manifest}" />

	<getmanifestvar name="manifest.version" variable="VERSION" />
	<getmanifestvar name="manifest.name" variable="NAME" />
	<getmanifestvar name="manifest.namespace" variable="NAMESPACE" />

	<!-- Allow for variable defaults -->
	<property name="manifest.name" value="${app.name}" />
	<property name="manifest.namespace" value="com.marvell.kinoma.${app.name}" />

	<propertyregex property="manifest.namespace.java"
			input="${manifest.namespace}"
			regexp="\."
			replace="/"
			global="true" />
	<propertyregex property="manifest.namespace.java.objectbase"
			input="${manifest.namespace}"
			regexp="\."
			replace="_"
			global="true" />
	<propertyregex property="manifest.namespace.app.name"
			input="${manifest.namespace}"
			regexp=".*\.([a-zA-Z]*$)"
			select="\1"
			defaultValue="${app.name}"
			casesensitive="false" />

	<if>
		<isset property="build.base" />
		<then>
			<propertyregex property="build.base.path"
					input="${build.base}"
					regexp="~"
					replace="${env.HOME}"
					global="true"
					defaultValue="${build.base}" />
			<property name="build.bin" location="${build.base.path}/bin" />
			<property name="build.tmp" location="${build.base.path}/tmp" />
		</then>
	</if>

	<propertyregex property="target.subplatform"
		input="${target.platform}"
		regexp="[^\/]*(/.*)"
		select="\1"
		/>
	<propertyregex property="target.platform"
		input="${target.platform}"
		regexp="([^\/]*).*"
		select="\1"
		override="true"
		/>

	<import file="${config.basedir}/${target.platform}/build.xml" />
	<property name="target.subplatform" value="" />

	<property file="${config.basedir}/build.properties" />
	<property name="manifest.version" value="${core.version}" />

	<target name="config" depends="xs-build,create-destination-dirs,freetype-extract">
		<echo>${xs.tools.config} ${xs.tools.config.options}</echo>
		<exec executable="${xs.tools.config}" failonerror="true">
			<arg line="${xs.tools.config.options}" />
			<env key="FREETYPE_VERSION" value="${freetype.version}" />
		</exec>
	</target>

	<target name="cmake-build" depends="load-defaults,config,package">
		<cmake srcdir="${build.tmp}"
				bindir="${cmake.dir}"
				cmakeonly="true">
			<variable name="APP_NAME" value="${app.name}" />
			<variable name="MANIFEST" value="${fsk.manifest.absolute}" />
			<variable name="MANIFEST_NAME" value="${manifest.name}" />
			<variable name="KPR_APPLICATION" value="${manifest.namespace.app.name}" />
			<variable name="BUILD_BIN" value="${build.bin}" />
			<variable name="BUILD_TMP" value="${build.tmp}" />
			<variable name="F_HOME" value="${f_home}" />
			<variable name="TARGET_PLATFORM" value="${target.platform}" />
			<variable name="TARGET_SUBPLATFORM" value="${target.subplatform}" />
			<variable name="CONFIG_BASEDIR" value="${config.basedir}" />
			<variable name="XS_HOME" value="${xs_home}" />
			<variable name="XSC" value="${xs.tools.xsc}" />
			<variable name="KPRCONFIG" value="${xs.tools.config}" />
			<variable name="KPRCONFIG_OPTIONS" value="${xs.tools.config.options}" />
			<variable name="XS_DEBUG" value="${xs.tools.config.${build.type}}" />
			<variable name="KPR2JS" value="${xs.tools.kpr2js}" />
			<variable name="CMAKE_GENERATOR" value="${cmake.generator}" />
			<variable name="FREETYPE_VERSION" value="${freetype.version}" />
			<generator name="${cmake.generator}" buildargs="${build.args}" platform="android">
				<variable name="CMAKE_TOOLCHAIN_FILE" value="${toolchain.file}" />
				<variable name="ANDROID_API_LEVEL" value="${android.api.level}" />
				<variable name="ANDROID_NDK" value="${env.ANDROID_NDK}" />
				<variable name="ANDROID_NDK_HOST_X64" value="${ANDROID_NDK64}" />
				<variable name="NDK_PROJECT_PATH" value="${ndk.project.path}" />
				<variable name="ANT_BUILD_TYPE" value="${ant.build.type}" />
				<variable name="FSK_JAVA_NAMESPACE" value="${manifest.namespace.java}" />
			</generator>
			<generator name="${cmake.generator}" buildargs="${build.args}" platform="iphone">
				<variable name="CMAKE_TOOLCHAIN_FILE" value="${toolchain.file}" />
				<variable name="IOS_PLATFORM" value="${ios.platform}" />
				<variable name="KPR_PATCH_PATH" value="${kpr.patch.path}" />
				<variable name="CODESIGN_ID" value="${codesign.id}" />
				<variable name="MANIFEST_NAMESPACE" value="${manifest.namespace}" />
				<variable name="SDK_MIN" value="${version.minimum}" />
			</generator>
			<generator name="${cmake.generator}" buildargs="${build.args}" platform="linux">
				<variable name="CMAKE_TOOLCHAIN_FILE" value="${toolchain.file}" />
				<variable name="CMAKE_INSTALL_PREFIX" value="${build.bin}" />
			</generator>
			<generator name="${cmake.generator}" buildargs="${build.args}" />
		</cmake>
		<if>
			<equals arg1="${cmake.only}" arg2="false" />
			<then>
				<exec executable="cmake" failonerror="true" taskname="cmake">
					<arg line="--build ${cmake.dir}" />
				</exec>
			</then>
		</if>
	</target>
	
	<target name="app-clean" depends="load-defaults">
		<delete dir="${build.bin}" />
		<delete dir="${build.tmp}" />
	</target>

	<target name="main" depends="cmake-build">
	</target>
</project>