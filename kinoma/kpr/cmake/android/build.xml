<project basedir="." name="android_platform">
	<property file="${config.basedir}/${target.platform}/build.properties" />

	<property name="env.ANDROID_NDK" value="" />

	<if>
		<available file="${env.ANDROID_NDK}/RELEASE.TXT" />
		<then>
			<loadfile srcFile="${env.ANDROID_NDK}/RELEASE.TXT" property="ndk.release" />
			<propertyregex property="ANDROID_NDK64"
				input="${ndk.release}"
				regexp="r.* \(64-bit\)"
				replace="1"
				defaultValue="0"
				casesensitive="false" />
		</then>
		<else>
			<echo>Your Android NDK is either too old or not installed properly.</echo>
			<echo>Please use "brew install android-ndk" or install it according to</echo>
			<echo>Google's documentation: 'Installing the NDK'</echo>
			<echo>https://developer.android.com/tools/sdk/ndk/index.html#Installing</echo>
			<echo>and then export ANDROID_NDK=/usr/local/opt/android-ndk</echo>
			<echo>or to the path you installed the NDK in your shell.</echo>
			<fail>Unusable NDK</fail>
		</else>
	</if>

	<if>
		<not>
			<available file="${env.ANDROID_SDK}/tools/android" />
		</not>
		<then>
			<echo>Your Android SDK is not available for building this product.</echo>
			<echo>Please use "brew install android-sdk" or install it according to</echo>
			<echo>Google's documentation: 'Installing the Stand-alone SDK Tools'</echo>
			<echo>https://developer.android.com/sdk/installing/index.html?pkg=tools</echo>
			<echo>and then export ANDROID_SDK=/usr/local/opt/android-sdk</echo>
			<echo>or to the path you installed the SDK in your shell.</echo>
			<fail>Unusable SDK</fail>
		</then>
	</if>

	<if>
		<available file="${env.HOME}/.android.keystore.info" />
		<then>
			<property name="ant.build.type" value="release" />
		</then>
	</if>
	<property name="ant.build.type" value="debug" />

	<target name="copy-files" depends="load-defaults,config">
		<property name="ndk.path" value="${build.tmp}/ndk" />
		<property name="ndk.project.path" value="${ndk.path}/project" />
		<property name="ndk.project.path.tmp" value="${ndk.path}/project_temp" />
		<property name="ndk.project.bin" value="${ndk.project.path}/bin" />
		<property name="ndk.project.gen" value="${ndk.project.path}/gen" />
		<property name="ndk.project.libraries" value="${ndk.project.path}/libs/armeabi" />
		<property name="ndk.project.objects" value="${ndk.project.path}/obj/local/armeabi" />
		<property name="ndk.play.path" value="${f_home}/build/android/inNDK" />
		<property name="ndk.kpr.path" value="${f_home}/kinoma/kpr/cmake/android/ndk" />

		<mkdir dir="${ndk.project.path.tmp}" />
		<property name="ant.build.type" value="debug" />
		<copy todir="${ndk.path}" file="${ndk.play.path}/Play/Application.mk" />
		<if>
			<not>
				<equals arg1="${manifest.remoteNotification}" arg2="0" />
			</not>
			<then>
				<copy todir="${ndk.path}/google-play-services_lib">
					<fileset dir="${ndk.play.path}/extras/google/google_play_services/libproject/google-play-services_lib" />
				</copy>
			</then>
		</if>
		<copy todir="${ndk.project.path.tmp}" file="${ndk.kpr.path}/project/AndroidManifest.xml" />
		<copy todir="${ndk.project.path.tmp}" file="${ndk.kpr.path}/project/build.xml" />
		<copy todir="${ndk.project.path.tmp}" file="${ndk.play.path}/Play/project/proguard.cfg" />
		<copy todir="${ndk.project.path.tmp}" file="${ndk.play.path}/Play/project/project.properties" />
		<preprocess source="${ndk.play.path}/Play/project/src/com/kinoma/kinomaplay" destination="${ndk.project.path.tmp}/java">
			<cfgFile file="${build.tmp}/permissions.cfg" />
		</preprocess>
		<copy todir="${ndk.project.path.tmp}/jni" file="${ndk.kpr.path}/project/jni/Android.mk" />
		<copy todir="${ndk.project.path.tmp}/jni">
			<fileset dir="${ndk.play.path}/kinoma" excludes="Android.mk" />
		</copy>
		<if>
			<available file="${kpr.application.path}/android" type="dir" />
			<then>
				<copy todir="${ndk.project.path.tmp}/res">
					<fileset dir="${kpr.application.path}/android" />
				</copy>
			</then>
		</if>
		<copy todir="${ndk.project.path.tmp}/res/layout" file="${ndk.play.path}/Play/project/res/layout/main.xml" />
		<copy todir="${ndk.project.path.tmp}/res/values" file="${ndk.kpr.path}/project/res/values/strings.xml" />
		<copy todir="${ndk.project.path.tmp}/res/xml" file="${ndk.kpr.path}/project/res/xml/kconfig.xml" />
		<copy todir="${ndk.project.path.tmp}/res">
			<fileset dir="${ndk.play.path}/Play/project/res" />
		</copy>
		<if>
			<not>
				<equals arg1="${manifest.remoteNotification}" arg2="0" />
			</not>
			<then>
				<copy todir="${ndk.project.path.tmp}/libs" file="${ndk.play.path}/extras/android/support/v4/android-support-v4.jar" />
			</then>
		</if>
	</target>

	<target name="fix-name" depends="copy-files">
		<property name="features.path" value="${build.tmp}/features.txt" />
		<property name="permissions.path" value="${build.tmp}/permissions.txt" />
		<property name="versions.path" value="${build.tmp}/versions.properties" />

		<loadfile property="manifest.features" srcFile="${features.path}" />
		<loadfile property="manifest.permissions" srcFile="${permissions.path}" />
		<property file="${versions.path}" />

		<switch value="${build.type}" caseinsensitive="true">
			<case value="debug">
				<property name="android.debuggable" value="true" />
				<!-- Turn instrumentation on for debug builds because of issues with r9+ -->
				<replace file="${build.tmp}/FskPlatform.h">
					<replacefilter
						token="SUPPORT_INSTRUMENTATION 0"
						value="SUPPORT_INSTRUMENTATION 1" />
				</replace>
			</case>
			<case value="release">
				<property name="android.debuggable" value="false" />
			</case>
		</switch>

		<getmanifestoption element="orientation" property="android.orientation" />
		<switch value="${android.orientation}" caseinsensitive="true">
			<case value="portrait">
				<property name="orientation.option" value="" />
				<property name="orientation.type" value="portrait" />
			</case>
			<case value="landscape">
				<property name="orientation.option" value="" />
				<property name="orientation.type" value="landscape" />
			</case>
			<case value="sensorPortrait">
				<property name="orientation.option" value="|orientation" />
				<property name="orientation.type" value="sensorPortrait" />
			</case>
			<case value="sensorLandscape">
				<property name="orientation.option" value="|orientation" />
				<property name="orientation.type" value="sensorLandscape" />
			</case>
			<default>
				<property name="orientation.option" value="|orientation" />
				<property name="orientation.type" value="sensor" />
			</default>
		</switch>

		<replace dir="${ndk.project.path.tmp}">
			<fileset dir="${ndk.project.path.tmp}" />
			<replacefilter token="com.kinoma.kinomaplay" value="${manifest.namespace}" />
			<replacefilter token="com/kinoma/kinomaplay" value="${manifest.namespace.java}" />
			<replacefilter token="#OBJECT_BASE#" value="${manifest.namespace.java.objectbase}" />
			<replacefilter token="#NAMESPACE#" value="${manifest.namespace}" />
			<replacefilter token="#VERSION#" value="${manifest.version} (${core.version})" />
			<replacefilter token="#KPR_APPLICATION#" value="${manifest.namespace.app.name}" />
			<replacefilter token="#APP_NAME#" value="${manifest.name}" />
			<replacefilter token="Kinoma Play" value="Kinoma ${manifest.name}" />
			<replacefilter token="#MANIFEST_FEATURES#" value="${manifest.features}" />
			<replacefilter token="#MANIFEST_PERMISSIONS#" value="${manifest.permissions}" />
			<replacefilter token="#VERSION_MINIMUM#" value="${version.minimum}" />
			<replacefilter token="#VERSION_TARGET#" value="${version.target}" />
			<replacefilter token="#ANDROID_DEBUGGABLE#" value="${android.debuggable}" />
			<replacefilter token="#ORIENTATION_OPTION#" value="${orientation.option}" />
			<replacefilter token="#ORIENTATION_TYPE#" value="${orientation.type}" />
		</replace>
	</target>

	<target name="copy-key-info" depends="copy-files">
		<if>
			<equals arg1="${ant.build.type}" arg2="release" />
			<then>
				<copy tofile="${ndk.project.path.tmp}/local.properties" file="${env.HOME}/.android.keystore.info" overwrite="true" />
			</then>
		</if>
	</target>

	<target name="package" depends="load-defaults,config,fix-name,copy-key-info">
		<copy todir="${ndk.project.path}" overwrite="true">
			<fileset dir="${ndk.project.path.tmp}" />
		</copy>
		<delete dir="${ndk.project.path.tmp}" />
		<mkdir dir="${ndk.project.path}/src/com/marvell/kinoma" />
		<symlink link="${ndk.project.path}/src/com/marvell/kinoma/${manifest.namespace.app.name}" resource="${ndk.project.path}/java" overwrite="true" />
		<if >
			<equals arg1="${manifest.remoteNotification}" arg2="0" />
			<then>
				<delete file="${ndk.project.path}/src/com/marvell/kinoma/${manifest.namespace.app.name}/GcmBroadcastReceiver.java"/>
				<delete file="${ndk.project.path}/src/com/marvell/kinoma/${manifest.namespace.app.name}/GcmIntentService.java"/>
			</then>
		</if>
		<exec executable="android" failonerror="true">
			<arg line="update project -p ${ndk.project.path}" />
		</exec>
		<if>
			<not>
				<equals arg1="${manifest.remoteNotification}" arg2="0" />
			</not>
			<then>
				<exec executable="android" failonerror="true" dir="${ndk.project.path}">
					<arg line="update project -p . -l ../google-play-services_lib" />
				</exec>
				<exec executable="android" failonerror="true">
					<arg line="update project -p ${ndk.path}/google-play-services_lib -t android-17" />
				</exec>
			</then>
		</if>
	</target>
</project>
