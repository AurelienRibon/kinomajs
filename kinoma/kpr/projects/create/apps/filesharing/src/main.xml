<?xml version="1.0" encoding="utf-8"?>
<!--
|     Copyright (C) 2010-2016 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require id="CONTROL_THEME" path="themes/flat/theme"/>
	<require id="THEME" path="themes/sample/theme"/>
	<script><![CDATA[
		for (var i in CONTROL_THEME)
			THEME[i] = CONTROL_THEME[i];
	]]></script>
	<require id="CREATIONS" path="creations/creations"/>
	<require id="CONTROL" path="mobile/control"/>
	<require id="MODEL" path="mobile/model"/>
	<require id="SCREEN" path="mobile/screen"/>
	<require id="SCROLLER" path="mobile/scroller"/>
	<require id="SERVER" path="server"/>
	
	<!-- SKIN/TEXTURE -->
	
	<skin id="blackSkin" color="black"/>
	<skin id="whiteSkin" color="white"/>
	
	<skin id="footerSkin" color="#666666"/>
	
	<texture id="helpIconTexture" small="assets/header-help.png"/>
	<skin id="helpIconSkin" texture="helpIconTexture" x="0" y="0" width="32" height="32">
		<states offset="32"/>
	</skin>
	
	<!-- STYLE -->
	
	<style id="applicationStyle" font="16px Fira Sans"/>
	<style id="footerStyle" font="24px" align="center,middle">
		<states colors="white,white,#5ab021"/>
	</style>
	<style id="infoLargeStyle" font="24px" color="black" align="center,middle"/>
	<style id="infoSmallStyle" font="20px" color="black" align="center,middle"/>
	<style id="textLineStyle" font="20px" color="#3b3b3b" align="left"/>
	<style id="textLineStyleX" font="20px" color="black" align="left"/>
	<style id="textLineStyleY" font="bold 20px" color="black" align="left"/>
	<!--style id="textLineStyle" font="18px Fira Mono" color="#00fc56" align="left"/-->
	
	<!-- VARIABLE -->
	
	<variable id="textLineHeight" value="textLineStyle.measure(' ').height"/>
	
	<!-- BEHAVIOR -->
	
	<behavior id="ApplicationBehavior" like="MODEL.ApplicationBehavior"><![CDATA[
		function onAccept(application, message) {
			if (message.method) return model.data.server.onAccept(application, message);
		}
		function onInvoke(application, message) {
			if (message.method) {
				if (model.data.allowGuestAccess) {
					this.onInvokeAccess(application, message);
				}
				else {
					switch (model.data.authentication) {
						case BASIC_AUTHENTICATION:
							this.onInvokeBasicAuthentication(application, message);
							break;
						case DIGEST_ACCESS_AUTHENTICATION:
							this.onInvokeDigestAccessAuthentication(application, message);
							break;
						default:
							message.status = 403; // Forbidden
							break;
					}
				}
			}
			MODEL.ApplicationBehavior.prototype.onInvoke.call(this, application, message);
		}
		function onInvokeAccess(application, message) {
			model.data.server.onInvoke(application, message);
		}
		function onInvokeBasicAuthentication(application, message) {
			var authorization = message.getRequestHeader("Authorization");
			if (authorization) {
				if (authorization.indexOf("Basic ") == 0) {
					var a = decodeBase64(authorization.slice(6)).split(":");
					var authorized = (a.length == 2) && (a[0] == model.data.credentials.username) && (a[1] == model.data.credentials.password);
				}
			}
			if (authorization && authorized) {
				this.onInvokeAccess(application, message);
			}
			else {
				// http://tools.ietf.org/html/rfc2617#section-3.2.1
				// http://www.webdav.org/specs/rfc4918.html#rfc.section.20.1
				message.setResponseHeader("WWW-Authenticate", "Basic realm=\"" + model.data.realm + "\"");
				message.status = 401; // Unauthorized
			}
		}
		function onInvokeDigestAccessAuthentication(application, message) {
			var algorithm = "MD5", lifetime = 300.0, secret = model.data.secret, stale = false;
			var authorization = message.getRequestHeader("Authorization");
			if (authorization) {
				if (authorization.indexOf("Digest ") == 0) {
					var matches = authorization.match(/nonce=\"([^"]+)\"/);
					if (matches && matches.length) {
						var nonce = matches[1];
					}
					var matches = authorization.match(/response=\"([^"]+)\"/);
					if (matches && matches.length) {
						var response = matches[1];
					}
					var matches = authorization.match(/uri=\"([^"]+)\"/);
					if (matches && matches.length) {
						var uri = matches[1];
					}
					if (nonce && response) {
						if (secret.check(nonce, lifetime)) {
							var md5 = new Crypt.MD5();
							md5.update(message.method);
							md5.update(":");
							md5.update(uri || encodeURI(message.path));
							var HA2 = md5.close();
							var md5 = new Crypt.MD5();
							md5.update(secret.binhex(model.data.HA1) + ":" + nonce + ":" + secret.binhex(HA2));
							var authorized = (secret.binhex(md5.close()) == response);
						}
						else {
							stale = true;
						}
					}
				}
			}
			if (authorization && authorized) {
				this.onInvokeAccess(application, message);
			}
			else {
				// http://tools.ietf.org/html/rfc2617#section-3.2.1
				// http://www.webdav.org/specs/rfc4918.html#rfc.section.20.1
				message.setResponseHeader("WWW-Authenticate", "Digest realm=\"" + model.data.realm + "\", nonce=\"" + secret.nonce + "\", stale=\"" + stale + "\", algorithm=\"" + algorithm + "\"");
				message.status = 401; // Unauthorized
			}
		}
	]]></behavior>
	
	<behavior id="CommandBehavior" like="MODEL.CommandBehavior"/>
	
	<behavior id="ScreenBehavior" like="MODEL.ScreenBehavior"/>
	
<!-- CLASS -->
	
	<class id="Secret">
		<field id="random"/>
		<field id="realm"/>
		<constructor params="realm"><![CDATA[
			this.random = Crypt.defaultRNG.get(8);
			this.realm = realm;
		]]></constructor>
		<method id="binhex" params="bin"><![CDATA[
			var hex = (new Arith.Integer(bin)).toString(16, 32);
			return hex.toLowerCase();
		]]></method>
		<method id="build" params="time"><![CDATA[
			var sha1 = new Crypt.SHA1();
			sha1.update(this.random);
			sha1.update(this.realm);
			var T = time.toString();
			sha1.update(T);
			var H = sha1.close();
			return encodeBase64(T + ":" + H);
		]]></method>
		<method id="check" params="nonce, lifetime"><![CDATA[
			var a = decodeBase64(nonce).split(":");
			var H = a[1];
			var T = a[0];
			var time = parseFloat(T);
			var check = this.build(time);
			var delta = Date.now() - time;
			return ((check == nonce) && (!lifetime || (delta >= 0.0) && (delta <= lifetime)));
		]]></method>
		<getter id="nonce"><![CDATA[
			return this.build(Date.now());
		]]></getter>
	</class>
	
<!-- CONTAINER/LAYOUTS -->
	
	<container id="Screen" left="0" right="0" top="0" bottom="0" behavior="ScreenBehavior"/>
	
	<container id="HelpToolButton" left="0" right="0" top="0" bottom="0" active="true">
		<container anchor="HELP_TOOL_BUTTON" like="CREATIONS.ToolButton" skin="helpIconSkin">
			<behavior like="CREATIONS.ToolButtonBehavior">
				<method id="onCreate" params="container, data"><![CDATA[
					CREATIONS.ToolButtonBehavior.prototype.onCreate.call(this, container, data);
					this.animating = false;
				]]></method>
				<method id="onTap" params="container"><![CDATA[
					var data = this.data;
					if (data.DYNAMIC_SCROLLER && !this.animating) {
						var scroller = data.DYNAMIC_SCROLLER;
						this.fromScrollX = scroller.scroll.x;
						this.toScrollX = 250;
						this.toScrollXFinal = 225;
						this.duration = 1000;
						container.time = 0;
						container.start();
						this.animating = true;
						this.bumped = false;
					}
				]]></method>
				<method id="onTimeChanged" params="container"><![CDATA[
					var scroller = this.data.DYNAMIC_SCROLLER;
					var fraction = container.time / this.duration;
					if (fraction > 1) {
						fraction = 1;
					}
					fraction = Math.quadEaseOut(fraction);
					var xScroll = this.lerp(fraction, this.fromScrollX, this.toScrollX);
					scroller.delegate("scrollTo", xScroll);
					scroller.delegate("updateScrolled");
					if (fraction == 1) {
						if (this.bumped) {
							container.stop();
							this.animating = false;
						}
						else {
							this.fromScrollX = this.toScrollX;
							this.toScrollX = this.toScrollXFinal;
							this.bumped = true;
							container.time = 0;
						}
					}
				]]></method>
				<method id="lerp" params="fraction, fromValue, toValue"><![CDATA[
					return fromValue + fraction * (toValue - fromValue);
				]]></method>
			</behavior>
		</container>
	</container>
	
	<label id="TextLine" left="0" height="textLineHeight" string="$.text" style="textLineStyle"/>
	
	<container id="SharingScreen" like="Screen">
		<content left="0" top="0" right="0" height="32" skin="whiteSkin"/>
		<container anchor="BODY" left="0" right="0" top="32" bottom="32" skin="whiteSkin">
			<behavior><![CDATA[
				function onComplete(container, message, json) {
					var data = this.data;
					if (json !== undefined) {
						var credentials = model.data.credentials;
						if (credentials.password === undefined) {
							credentials.password = json; // settings password
							if (model.data.authentication == DIGEST_ACCESS_AUTHENTICATION) {
								var md5 = new Crypt.MD5();
								md5.update(credentials.username);
								md5.update(":");
								md5.update(model.data.realm);
								md5.update(":");
								md5.update(credentials.password);
								model.data.HA1 = md5.close();
							}
						}
						else if (model.data.allowGuestAccess === undefined) {
							model.data.allowGuestAccess = (json !== "on"); // settings require-password
						}
						else {
							data.ipAddress = ("ip_address" in json) ? json.ip_address : undefined;
							if ("ssid" in json) {
								data.TEXTINFO.string = expandTemplateData(data.template, { NETWORK: "'" + json.ssid + "' Wi-Fi network" });
							}
						}
					}
					else debugger;
				}
				function onCreate(container, data) {
					this.data = data;
					if (model.data.authentication == DIGEST_ACCESS_AUTHENTICATION) {
						model.data.secret = new Secret(model.data.realm);
					}
					model.data.server = new SERVER.WebDAVServer(false, true, model.data.title);
					application.share(true);
				//	this.advertisement = new Zeroconf.Advertisement("_webdav._tcp.", "Kinoma " + model.data.title, application.serverPort, this);
				//	this.advertisement.behavior = this;
				//	this.advertisement.start();
					container.interval = 2000;
					container.start();
				}
				function onDisplaying(container) {
					var data = this.data;
					data.ipAddress = undefined;
					container.invoke(new Message("xkpr://shell/settings/password"), Message.JSON);
					container.invoke(new Message("xkpr://shell/settings/require-password"), Message.JSON);
					container.invoke(new Message("xkpr://wifi/status"), Message.JSON);
				}
				function onLog(container, text) {
					var data = this.data;
					var button = data.HELP_TOOL_BUTTON;
					var scroller = data.DYNAMIC_SCROLLER;
					var column = scroller.first.first;
					if (button.active) {
						button.active = button.visible = false;
						column.empty();
						scroller.delegate("scrollTo", 0);
						scroller.delegate("updateScrolled");
					}
					var line = new TextLine({ text: text });
					if (column.first) {
						column.insert(line, column.first);
						var length = column.length;
						var limit = ("limit" in data) ? data.limit : 100;
						if (length >= limit) {
							column.empty(limit, length);
						}
					} else {
						column.add(line);
					}
					return true;
				}
				function onTimeChanged(container) {
					var data = this.data;
					var host = data.ipAddress;
					var port = application.serverPort;
					if (host && port) {
						data.LABEL.string = "http://" + host + ":" + port + "/";
						container.stop();
					}
				}
				function onUndisplayed(container) {
					model.data.server = undefined;
				//	this.advertisement.stop();
				//	this.advertisement = undefined;
				//	application.shared = false;
				}
			]]></behavior>
			<scroller anchor="DYNAMIC_SCROLLER" left="0" right="0" top="0" bottom="0" like="SCROLLER.VerticalScroller" behavior="CREATIONS.DynamicHeaderScrollerBehavior">
				<scroller left="0" right="0" top="0" bottom="undefined" like="SCROLLER.HorizontalScroller">
					<column left="0" top="0">
						<text left="15" width="290" top="40" style="infoLargeStyle" string="'WebDAV server only active when this app is in view'"/>
						<text anchor="TEXTINFO" left="15" width="290" top="20" style="infoSmallStyle" string="$.textinfo"/>
						<text left="15" width="290" top="50" style="infoSmallStyle" string="'Username/password: kinoma'"/>
						<text left="15" width="290" top="20" style="textLineStyleX" string="'Go to Settings > Debugging then uncheck Require Password to enable guest access, or tap Password to set a new password.'"/>
						<line left="15" width="290" top="20">
							<picture left="0" width="34" top="0" height="38" aspect="'fill'" url="'assets/osx-grey-logo.png'"/>
							<text left="10" right="0" top="10" style="textLineStyleY" string="'OS X Mavericks'"/>
						</line>
						<text left="15" width="290" top="20" style="textLineStyleX" string="'You can connect to your Kinoma Create at Finder > Go > Connect to Server… with the address on the main screen.'"/>
						<picture left="0" width="250" top="20" height="158" aspect="'fill'" url="'assets/mac-webdav-menus.png'"/>
						<line left="15" width="290" top="20">
							<picture left="0" width="34" top="0" height="38" aspect="'fill'" url="'assets/win-grey-logo.png'"/>
							<text left="10" right="0" top="10" style="textLineStyleY" string="'Windows 7'"/>
						</line>
						<text left="15" width="290" top="20" style="textLineStyleX" string="'You can connect to your Kinoma Create at Windows Start -> Computer -> Map network drive -> Folder with the address on the main screen'"/>
						<!-- http://windows.microsoft.com/en-au/windows/create-shortcut-map-network-drive#1TC=windows-7 -->
						<picture left="0" width="300" top="20" height="247" aspect="'fill'" url="'assets/win-map-network-drive.png'"/>
						<text left="15" width="290" top="20" bottom="20" style="textLineStyleX" string="'File Sharing implements a class 2 compliant WebDAV server, so you can connect using any other client that supports WebDAV.'"/>
					</column>
					<content like="SCROLLER.HorizontalScrollbar">
						<behavior like="SCROLLER.HorizontalScrollbarBehavior"><![CDATA[
							function onScrolled(scrollbar) {
								SCROLLER.HorizontalScrollbarBehavior.prototype.onScrolled.call(this, scrollbar);
								var container = scrollbar.container.container;
								scrollbar.y = container.y + container.height - scrollbar.height;
							}
						]]></behavior>
					</content>
				</scroller>
				<content like="SCROLLER.VerticalScrollbar"/>
			</scroller>
		</container>
		<container anchor="HEADER" like="CREATIONS.DynamicHeader"/>
		<container anchor="FOOTER" like="SCREEN.EmptyFooter" left="0" right="0" bottom="0" height="32" skin="footerSkin" active="true">
			<line left="0" right="0" style="footerStyle">
				<container left="0" right="0" active="true">
					<label anchor="LABEL" string="'Starting...'"/>
				</container>
			</line>
		</container>
	</container>
	
	<!-- HANDLER -->
	
	<handler path="/main">
		<behavior like="ScreenBehavior"><![CDATA[
			function hasSelection(data, delta) {
				return false;
			}
			function getSelection(data, delta) {
			}
			function onDescribe(query, selection) {
				var template = "Access the device on {NETWORK} at the URL below";
				var textinfo = expandTemplateData(template, { NETWORK: "your Wi-Fi network" });
				return {
					items: [],
					more: false,
					Screen: SharingScreen,
					scroll: {
						x: 0,
						y: 0
					},
					selection: -1,
					template: template,
					textinfo: textinfo,
					title: model.data.title,
					ToolButton: HelpToolButton
				};
			}
		]]></behavior>
	</handler>
	
	<!-- SCRIPT/MODEL -->
	
	<script><![CDATA[
		application.style = applicationStyle;
		var model = application.behavior = new ApplicationBehavior(application);
		var BASIC_AUTHENTICATION = 1, DIGEST_ACCESS_AUTHENTICATION = 2;
		var data = model.data = {
			allowGuestAccess: undefined,
			authentication: DIGEST_ACCESS_AUTHENTICATION,
			credentials: { username: "kinoma", password: undefined },
			HA1: undefined,
			limit: 500,
			realm: "Kinoma Create",
			secret: undefined,
			server: undefined,
			title: "File Sharing"
		};
		function expandTemplateData(template, data) {
			return template.replace(/{([\w$-]+)}/g, function (match, name) {
				return data[name];
			});
		}
		//include("Crypt");
	]]></script>
	
</program>
