<!--
|     Copyright (C) 2010-2015 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <!-- pin direction constants -->
    <variable id="INPUT" value="'input'" />
    <variable id="OUTPUT" value="'output'" />
    
    <!-- pin state constants -->
    <variable id="HIGH" value="1" />
    <variable id="LOW" value="0" />
    
    <!-- time units -->
    <variable id="DAYS" value="'days'" />
    <variable id="HOURS" value="'hours'" />
    <variable id="MICROSECONDS" value="'microseconds'" />
    <variable id="MILLISECONDS" value="'milliseconds'" />
    <variable id="MINUTES" value="'minutes'" />
    <variable id="NANOSECONDS" value="'nanoseconds'" />
    <variable id="SECONDS" value="'seconds'" />
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- HardwarepinsModule - base hardware pins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <class id="HardwarepinsModule">
        <field id="path" />
        <field id="config" />
        <field id="pollingConfig" />
        <field id="callbackMessageInvoker" />
        <field id="simulator" />
        <constructor params="config">
            <![CDATA[
                this.config = config;
                
                // initialize polling state objecy
                this.pollingConfig = new Object();
                this.pollingConfig.running = false;
                this.pollingConfig.invoker = new PollingInvoker( this.pollingConfig );
                this.pollingConfig.id = -1;
                
                this.callbackMessageInvoker = new CallbackMessageInvoker();
                
                if( this.isSimulator() )
                {
	                try
	                {
	                    // create the simulator
	                    this.simulator = this.createHardwarepinsSimulator( config );
	                    
	                    // register the hardwarepins simulator if it was created
	                    // by the hardwarepins module subclass...
	                    if( this.simulator != null )
	                        this.simulator.register( config );
	                }
	                catch( e ) {
	                }
	             }
            ]]>
        </constructor>
        <method id="isSimulator">
            <![CDATA[
                return getEnvironmentVariable( "hardwarepinsSimulator" ) == "true";
            ]]>
        </method>
        
        <!-- harwarepins simulator methods -->
        <method id="createHardwarepinsSimulator">
            <![CDATA[
                return null;
            ]]>
        </method>
        
        <!-- script accessor methods -->
        <method id="configureParameters" params="parameters"/>
        
        <method id="handleRunSimulation" params="query, parameters">
            <![CDATA[
                if( this.simulator != null )
                {
                    if( query.call in this.simulator )
                        this.simulator[query.call]( query, parameters, this.callbackMessageInvoker );
                    //else
                    //    trace( "### " + query.call + " not implemented in HardwarepinsModule.SimulatorInterface...\n" );
                }
            ]]>
        </method>
        <method id="handlePollingSimulation" params="query, parameters">
            <![CDATA[
                if( this.simulator != null )
                {
                    if( query.call in this.simulator )
                        this.simulator[query.call]( query, parameters, this.pollingConfig.invoker );
                    //else
                    //    trace( "### " + query.call + " not implemented in HardwarepinsModule.SimulatorInterface...\n" );
                }
            ]]>
        </method>
        
        <method id="run" params="require, call, params, callback, type">
            <![CDATA[
                var query = new Object();
                var parameters = new Object();
                
                // configure query
                query.require = require;
                query.call = call;
                
                if( callback != null )
                    query.callback = createCallback( callback );
                
                if( params != null )
                {
                    for( var next in params )
                        parameters[next] = params[next];
                }
                
                // allow the subclass to configure the parameters
                this.configureParameters( parameters );
    
                if( this.isSimulator() )
                    this.handleRunSimulation( query, parameters );
    
                else
                {
                    var msg = new Message( "xkpr://shell/pins/run?" + serializeQuery( query ) );
                    
                    msg.requestObject = parameters;

                    if( callback != null )
                        this.callbackMessageInvoker.invoke( msg, type || Message.TEXT );
                    else
                        this.callbackMessageInvoker.invoke( msg );
                }
            ]]>
        </method>
        <method id="repeat" params="require, call, params, time, units, skipFirst, callback">
            <![CDATA[
                // stop polling if the module is already polling
                if( this.isPolling() )
                    this.stop();
                
                var query = new Object();
                var parameters = new Object();

                // configure query                    
                query.require = require;
                query.call = call;
                    
                if( time != null )
                    query.mseconds = convertTime( time, units, MILLISECONDS );
                
                if( callback != null )
                    query.callback = createCallback( callback );

                if( params != null )
                {
                    for( var next in params )
                        parameters[next] = params[next];
                }

                if( skipFirst != null )
                    query.skipFirst = skipFirst;
                
                // allow the subclass to configure the parameters
                this.configureParameters( parameters );
    
                if( this.isSimulator() )
                    this.handlePollingSimulation( query, parameters );

                else
                {
                    var msg = new Message( "xkpr://shell/pins/repeat?" + serializeQuery( query ) );
                    
                    msg.requestObject = parameters;

                    this.pollingConfig.invoker.invoke( msg );
                }
                
                this.pollingConfig.running = true;
            ]]>
        </method>
        <method id="stop" params="callback">
            <![CDATA[
                if( this.isPolling() )
                {
                    var query = new Object();

                    // configure query                    
                    query.id = this.pollingConfig.id;

                    if( callback != null )
                        query.callback = createCallback( callback );

                    if( this.simulator != null )
                        this.simulator.stop( query );

	                else if( this.isSimulator() == false )
	                {
	                    var msg = new Message( "xkpr://shell/pins/stop?" + serializeQuery( query ) );
	                    
	                    application.invoke( msg );
	                }

                    this.pollingConfig.running = false;
                    this.pollingConfig.id = -1;
                }
            ]]>
        </method>
        <method id="isPolling">
            <![CDATA[
                return this.pollingConfig.running;
            ]]>
        </method>
    </class>
    
    <private>
        <content id="CallbackMessageInvoker">
            <behavior>
                <method id="onComplete" params="content, message, data">
                    <![CDATA[
                    
                        var query = parseQuery( message.query );

                        if( "callback" in query )
                        {
                            var msg = new Message( query.callback );
                            
                            if( data != null )
                            {
                                if( data instanceof Chunk )
                                    msg.requestChunk = data;
                                else
                                    msg.requestText = data;
                            }
                            
                            content.invoke( msg );
                       }
                    ]]>
                </method>
            </behavior>
        </content>
	    <content id="PollingInvoker">
	        <behavior>
	            <field id="config" />
	            <method id="onCreate" params="content, config">
	                <![CDATA[
	                    this.config = config;
	                ]]>
	            </method>
	            <method id="onComplete" params="content, message">
	                <![CDATA[
	                   if( message.responseText != null )
	                   {
	                       var json = JSON.parse( message.responseText );
	                    
	                       if( "id" in json )
	                           this.config.id = json.id;
	                   }
	                ]]>
	            </method>
	        </behavior>
	    </content>
	</private>
	
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- I2C - I2C Hardwarepins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <class id="I2C" like="HardwarepinsModule">
        <field id="sda" />
		<field id="scl" />
		<field id="addr" />
		<constructor params="sda, scl, addr, config">
	      <![CDATA[            
	          this.sda = sda;
	          this.scl = scl;
	          this.addr = addr;
	
	          HardwarepinsModule.call( this, config );
	      ]]>
		</constructor>
		<method id="configureParameters" params="parameters">
	      <![CDATA[            
	          parameters.sda = this.sda;
	          parameters.scl = this.scl;
	          parameters.addr = this.addr;
	      ]]>
		</method>
    </class>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- GPIO - GPIO Hardwarepins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <class id="GPIO" like="HardwarepinsModule">
        <field id="pins" />
        <field id="direction" />
        <constructor params="pins, direction, config">
            <![CDATA[            
                this.pins = pins != null ? (pins instanceof Array ? pins : [pins]) : null;
                this.direction = direction;

                HardwarepinsModule.call( this, config );
            ]]>
        </constructor>
        <method id="configureParameters" params="parameters">
            <![CDATA[            
                parameters.pins = this.pins;
                parameters.direction = this.direction;
            ]]>
        </method>
    </class>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- PWM - PWM Hardwarepins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <class id="PWM" like="HardwarepinsModule">
        <field id="pins" />
        <constructor params="pins, config">
            <![CDATA[            
                this.pins = pins != null ? (pins instanceof Array ? pins : [pins]) : null;

                HardwarepinsModule.call( this, config );
            ]]>
        </constructor>
        <method id="configureParameters" params="parameters">
            <![CDATA[            
                parameters.pins = this.pins;
            ]]>
        </method>
    </class>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Analog - Analog Hardwarepins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <class id="Analog" like="HardwarepinsModule">
        <field id="pins" />
        <constructor params="pins, config">
            <![CDATA[            
                this.pins = pins != null ? (pins instanceof Array ? pins : [pins]) : null;

                HardwarepinsModule.call( this, config );
            ]]>
        </constructor>
        <method id="configureParameters" params="parameters">
            <![CDATA[            
                parameters.pins = this.pins;
            ]]>
        </method>
    </class>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Serial - Serial Hardwarepins module class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <class id="Serial" like="HardwarepinsModule">
        <field id="rx" />
        <field id="tx" />
        <field id="baud" />
        <constructor params="rx, tx, baud, config">
            <![CDATA[            
                this.rx = rx;
                this.tx = tx;
                this.baud = baud;

                HardwarepinsModule.call( this, config );
            ]]>
        </constructor>
        <method id="configureParameters" params="parameters">
            <![CDATA[            
                parameters.rx = this.rx;
                parameters.tx = this.tx;
                parameters.baud = this.baud;
                parameters.pins = [this.rx,this.tx];
            ]]>
        </method>
    </class>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- HardwarepinsModule Simulator -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <private>
        <variable id="simulatorInstanceCountMap" value="{}"/>
    </private>

    <class id="SimulatorInterface">
        <field id="instanceId" />
        <method id="getSimulatorId">
            <![CDATA[
                throw new Error( "getSimulatorId() must be implemented by subclass!" );
            ]]>
        </method>
        <method id="getSimulatorModule">
            <![CDATA[
                return null;
            ]]>
        </method>
        <method id="getNextInstanceCount">
            <![CDATA[
                var simulatorId = this.getSimulatorId();
                var instanceId = 0;
            
                if( simulatorId in simulatorInstanceCountMap )
                    instanceId = simulatorInstanceCountMap[simulatorId]++;
                else
                    simulatorInstanceCountMap[simulatorId] = 1;
            
                return instanceId;
            ]]>
        </method>
        <method id="register" params="config">
            <![CDATA[
                var module = this.getSimulatorModule();
            
                if( module != null )
                {
	                var query = new Object();
	                var instanceCount = this.getNextInstanceCount();
	                
	                // create the isntance id
	                this.instanceId = instanceCount == 0 ? this.getSimulatorId() : this.getSimulatorId() + "-" + instanceCount;
	                
	                trace( "### registering hardwarepins simulator: " + this.instanceId + "\n" );
	                
	                // create the register message query object
	                query._id = this.instanceId;
	                query._uri = module;
	                query._simulatorId = this.getSimulatorId();
	
	                var msg = new Message( "xkpr://shell/device/hardwarepins/register?" + serializeQuery( query ) );
	
	                if( config != null )
	                    msg.requestText = JSON.stringify( config );
	            
	                application.invoke( msg );
	            }
            ]]>
        </method>
        <method id="sendHardwarepinsEvent" params="event, query, parameters, invoker">
            <![CDATA[
                if( this.instanceId != null )
                {
	                var args = new Object();
	
	                // add the query values to the args object
	                for( var next in query )
	                    args[next] = query[next];
	    
	                // add the passed in args
	                args._id = this.instanceId;
	                args._event = event;
	                
	                // create the message
	                var message = new Message( "xkpr://shell/device/hardwarepins/event?" + serializeQuery( args ) )
	                
	                if( parameters != null )
	                    message.requestText = JSON.stringify( parameters );
	                    
	                // invoke the message
	                if( invoker != null )
	                   invoker.invoke( message, Message.TEXT );
	                else
	                   application.invoke( message );
	            }
            ]]>
        </method>
    </class>
    
    <!-- TimeUnit functions -->
    <function id="convertTime" params="time, from, to">
        <![CDATA[
            var convertedTime = 0;
            var fromUnits = from || MILLISECONDS;
            var toUnits = to || MILLISECONDS;
        
            if( toUnits == MILLISECONDS )
            {
                switch( fromUnits )
                {
                    case MILLISECONDS:  convertedTime = time; break;
                    case SECONDS:       convertedTime = time * 1000; break;
                    case MINUTES:       convertedTime = time * 60000; break;
                    case HOURS:         convertedTime = time * 3600000; break;
                    case DAYS:          convertedTime = time * 86400000; break;
                    case MICROSECONDS:  convertedTime = time / 10000; break;
                    case NANOSECONDS:   convertedTime = time / 1000000; break;
                    
                    default:
                        throw new Error( "Unsupported input conversion format: " + fromUnits );
                }
            }
            else
                throw new Error( "Unsupported output conversion format: " + toUnits );
                
            return convertedTime;
        ]]>
    </function>
    
    <!-- utility functions -->
    <function id="createCallback" params="path">
       <![CDATA[
          var handler = null;

          if( path.indexOf( "xkpr://" ) == 0 || path.indexOf( "http://" ) == 0 )
             handler = path;
          else
             handler = "xkpr://" + application.id + path;
       
          return handler;
       ]]>
    </function>
    
</module>
