<!--
|     Copyright (C) 2010-2015 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <class id="ExtensionManager">
        <field id="extensionPathList"/>
        <field id="temporaryUploadPath"/>
        <field id="extensionMap"/>
        <field id="extensionList"/>
        
        <constructor params="extensionPathList, temporaryUploadPath">
            <![CDATA[
                this.extensionPathList = extensionPathList != null ? extensionPathList : new Array();
                this.temporaryUploadPath = temporaryUploadPath;
                this.extensionMap = new Object();
                this.extensionList = new Array();
                this.reload();
            ]]>
        </constructor>
        
        <method id="reload">
            <![CDATA[
                this.extensionMap = new Object();
                this.extensionList = new Array();
            
                for( var j = 0; j < this.extensionPathList.length; j++ )
                {
                    var path = this.extensionPathList[j];
                    var temporary = this.temporaryUploadPath != null && path.indexOf( this.temporaryUploadPath ) == 0;

                    if( Files.exists( path ) == Files.directoryType )
                    {
                        if( this.registerExtension( path, temporary ) == null )
                        {
                            var iterator = new Files.Iterator( path );
                            var file;
                            
                            while( file = iterator.getNext() ) 
                            {
                                if( file.type == Files.directoryType ) 
                                    this.registerExtension( mergeURI( path, file.path ), temporary );
                            }
                        }
                    }
                }
            ]]>
        </method>
        
        <method id="registerExtension" params="url, temporary">
            <![CDATA[
                var normalizedUrl = url.charAt( url.length - 1 ) == '/' ? url : url + "/";
                
                if( normalizedUrl.indexOf( "file://" ) != 0 )
                    normalizedUrl = "file://" + normalizedUrl;
                
                var extensionFilePath = Files.exists( url ) == Files.directoryType ? normalizedUrl + this.getExtensionFilename() : url;
                var extensionInfo = null;
                            
                if( Files.exists( extensionFilePath ) == Files.fileType ) 
                {
                    try 
                    {
                        var extension = this.loadExtensionGrammar( extensionFilePath );
                        
                        extensionInfo = extension != null ? this.createExtensionInfo( extension, extensionFilePath, temporary ) : null;
                        
                        if( extensionInfo != null )
                        {
                            if( (extensionInfo.id in this.extensionMap) == false )
                            {
                                this.extensionMap[extensionInfo.id] = extensionInfo;
                                this.extensionList.push( extensionInfo );
                            }
                            else
                                trace( "#### Extension already registered: " + extensionInfo.id + "\n" );
                        }
                        else
                            trace( "#### Could not register extension: " + extensionFilePath + "\n" );
                    }
                    catch( ex ) {
                    }
                }
                
                return extensionInfo;
            ]]>
        </method>
        
        <method id="unregisterExtension" params="extensionInfo">
            <![CDATA[
                if( extensionInfo.id in this.extensionMap )
                {
                    // remove the extension info from the extension map
                    this.extensionMap[extensionInfo.id] = null;
                    
                    // delete the extension id from the map as well
                    delete this.extensionMap[extensionInfo.id];
                    
                    // remove the extension from the extension list
                    for( var j = 0; j < this.extensionList.length; j++ )
                    {
                        if( this.extensionList[j].id == extensionInfo.id ) {
                            this.extensionList.splice( j, 1 );
                            break;
                        }
                    }
                }
            ]]>
        </method>
        
        <method id="loadExtensionGrammar" params="url">
            <![CDATA[
                return Grammar.load( url );
            ]]>
        </method>
        
        <method id="getExtensionFilename">
            <![CDATA[
                return "extension.xml";
            ]]>
        </method>
        
        <method id="getExtensionCount">
            <![CDATA[
                return this.extensionList.length;
            ]]>
        </method>
        
        <method id="createExtensionInfo" params="extension, url">
            <![CDATA[
                return null;
            ]]>
        </method>
        
        <method id="getExtensionById" params="id">
            <![CDATA[
                return id in this.extensionMap ? this.extensionMap[id] : null;
            ]]>
        </method>
        
        <method id="getExtensionByIndex" params="index">
            <![CDATA[
                return index < this.extensionList.length ? this.extensionList[index] : null;
            ]]>
        </method>
        
        <method id="getExtensionByUrl" params="url">
            <![CDATA[
                var extension = null;
                    
                for( var j = 0; j < this.extensionList.length; j++ )
                {
                    if( this.extensionList[j].url == url ) {
                        extension = this.extensionList[j];  
                        break;
                    } 
                }
                
                return extension;
            ]]>
        </method>
    </class>
        
    <!-- export the main prototype -->
    <variable id="prototype" value="ExtensionManager.prototype"/>

    <class id="ExtensionInfo">
        <field id="extension"/>
        <field id="url"/>
        <field id="exports"/>
        <field id="title"/>
        <field id="id"/>
        <field id="di"/>
        
        <constructor params="extension, url, module">
            <![CDATA[
                this.extension = extension;
                this.url = url;
                this.title = extension.title;
                this.id = extension.id;
				this.di = this.id.split('.').reverse().join('.');
				
                this.exports = module != null ? require( getRuntimeModulePath( module ) ) : null;
            ]]>
        </constructor>
        
    </class>

    <function id="getExtensionIndex" params="url, extension">
        <![CDATA[
            return url.indexOf( "." + extension, url.length - extension.length - 1 );
        ]]>
    </function>
    
    <function id="getRuntimeModulePath" params="path">
        <![CDATA[
            var extensionIndex = getExtensionIndex( path, "xml" );
            
            // if the url does not have a xml extension check if it is
            // a .js file... otherwise we assume it is not a kpr program
            // or it doesn't have an extension!
            if( extensionIndex == -1 )
                extensionIndex = getExtensionIndex( path, "js" );
            
            // check if application has file extension.. if there is a file
            // extension then see if the file exists, otherwise change the
            // url so that it does not include a file extension
            if( extensionIndex != - 1 )
            {
                if( Files.exists( path ) == null )
                    path = path.substring( 0, extensionIndex );
            }
            
            return path;
        ]]>
    </function>

</module>
