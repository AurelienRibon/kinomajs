<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <require id="Logger" path="Logger"/>
        
    <class id="DebugHandlerMessageBehavior" like="Behavior">
        <method id="onAccept" params="handler, message">
            <![CDATA[
                return true;
            ]]>
        </method>
        
        <method id="onInvoke" params="handler, message">
            <![CDATA[
                var ts = new Date();
            
                getBehavior().handleMessageBegin( message );
            
                if( this.filterMessage( handler, message ) )
                {
                    this.processMessage( handler, message, new MessageParams( message ) );
                    
                    // add cross-domain policy headers
                    message.setResponseHeader( "Access-Control-Allow-Origin", "*" );                    
                    message.setResponseHeader( "Access-Control-Allow-Methods", "GET,POST,PUT,DELETE" ); 
                    message.setResponseHeader( "Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept" ); 

                    if( message.status == 0 && message.responseText == null )
                        this.handleDefaultMessageResponse( handler, message );
                        
                    // log the debug event
                    Logger.getLogger().logDebug( this.getLoggerMessage( message, ts ) );
                }
                
                getBehavior().handleMessageEnd( message );
            ]]>
        </method>
        
        <method id="filterMessage" params="handler, message">
            <![CDATA[
                var valid = this.allowConnections();
            
                if( valid == false ) {
                    message.status = 403;
                    message.setResponseHeader( "X-Error-Message", "Connection not allowed" );
                }
                
                return valid;
            ]]>
        </method>
        
        <method id="allowConnections">
            <![CDATA[
                return getBehavior().isDebuggingAllowed();
            ]]>
        </method>
        
        <method id="processMessage" params="handler, message, params"/>
        
        <method id="handleDefaultMessageResponse" params="handler, message">
            <![CDATA[
                message.responseText = "OK: " + new Date();
            ]]>
        </method>
        
        <method id="getLoggerMessage" params="message, ts">
            <![CDATA[
                var messageInfo = "received http server request: " + message.path;
                
                if( message.query != null )
                    messageInfo += ("?" + message.query);
            
                messageInfo += (" from: " + message.remoteIP);
                
                return messageInfo;
            ]]>
        </method>
    </class>
        
    <!-- export the main prototype -->
    <variable id="prototype" value="DebugHandlerMessageBehavior.prototype"/>

    <class id="MessageParams">
        <field id="params"/>
        
        <constructor params="message">
            <![CDATA[
                this.params = message != null && "query" in message && message.query != null ? parseQuery( message.query ) : new Object();
            ]]>
        </constructor>
        
        <method id="contains" params="key">
            <![CDATA[
                return this.params != null && key in this.params;
            ]]>
        </method>
        
        <method id="getValue" params="key, defaultValue">
            <![CDATA[
                return this.contains( key ) ? this.params[key] : defaultValue;
            ]]>
        </method>
        
        <method id="getBool" params="key, defaultValue">
            <![CDATA[
                var value = this.getValue( key, defaultValue );
                var result = false;
                var type = typeof value;


                if( type == "boolean" )
                    result = value;
                    
                else if( type == "string" )
                {
                    var normalizedValue = value != null ? value.toLowerCase() : null;
                
                    result = normalizedValue != null && (normalizedValue == "true" || normalizedValue == "1" || normalizedValue == "yes" || normalizedValue == "ok");
                }
                else if( type == "number" )
                    result = value != 0;
                else
                    result = new Boolean( value );
                    
                return result;
            ]]>
        </method>
    </class>

</module>
