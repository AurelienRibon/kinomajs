<!--
|     Copyright (C) 2010-2015 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <function id="newInstance" params="events">
        <![CDATA[
            return new EventMapper( events );
        ]]>
    </function>

    <function id="getKeyCodeForEvent" params="event, defaultKeyCode">
        <![CDATA[
            var eventMap = getTheme().getValue( "events" );
            var eventInfo = eventMap != null && event in eventMap ? eventMap[event] : null;
            var keyCode = eventInfo != null && "key" in eventInfo ? eventInfo.key : null;
            
            return keyCode != null ? keyCode : defaultKeyCode;
        ]]>
    </function>

    <class id="EventMapper">
        <field id="eventKeyMap"/>
        
        <constructor params="events">
            <![CDATA[
                this.eventKeyMap = new Object();
                
                if( events != snull )
                   this.addEvents( events )
            ]]>
        </constructor>
        
        <method id="addKeyMappingForKey" params="key, event">
            <![CDATA[
                this.addKeyMappingForKeyCode( key.charCodeAt( 0 ), event );
            ]]>
        </method>
        
        <method id="addKeyMappingForKeyCode" params="keyCode, event">
            <![CDATA[
                var mapping = "KC" + keyCode.toString();

                this.eventKeyMap[mapping] = event;
            ]]>
        </method>
        
        <method id="addEvents" params="events">
            <![CDATA[
                if( events != null )
                {
                    for( var j = 0; j < events.length; j++ ) {
                        this.addKeyMappingForKeyCode( events[j].key, events[j].name );
                    }
                }
            ]]>
        </method>
        
        <method id="getEventForKey" params="key">
            <![CDATA[
                var keyCode = key.charCodeAt( 0 );
                var event = this.getEventForKeyCode( keyCode );
                
                return event;
            ]]>
        </method>
        
        <method id="getEventForKeyCode" params="keyCode">
            <![CDATA[
                var mapping = "KC" + keyCode.toString();
                var event = mapping in this.eventKeyMap ? this.eventKeyMap[mapping] : null;
                
                return event;
            ]]>
        </method>
    </class>

</module>


                        
