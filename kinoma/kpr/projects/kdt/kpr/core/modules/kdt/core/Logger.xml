<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <variable id="DEFAULT" value="'default'"/>
    <variable id="DEBUG" value="'debug'"/>
    <variable id="INFO" value="'info'"/>
    <variable id="ERROR" value="'error'"/>
    <variable id="WARNING" value="'warning'"/>

    <function id="log" params="message, newline, host">
        <![CDATA[
            var logMessage = newline == true ? message + "\n" : message;
                    
            if( host != null )
                host.trace( logMessage );
            else
                trace( logMessage );
        ]]>
    </function>
    
    <function id="getLogger" params="name">
        <![CDATA[
            var loggerName = name != null ? name : DEFAULT;
            var logger = null;
        
            if( loggerName in loggerMap )
                logger = loggerMap[loggerName];
                
            else
                logger = loggerMap[loggerName] = new Logger( loggerName );
                
            return logger;
        ]]>
    </function>
    
    <script>
        <![CDATA[
            // define prive module variables
            var loggerMap = new Object();
        ]]>
    </script>
    
    <class id="Logger">
        <field id="name"/>
        <field id="listenerList"/>
        <field id="messageList"/>
        
        <constructor params="name">
            <![CDATA[
                this.name = name;
                this.listenerList = new Array();
                this.messageList = new Array();
            ]]>
        </constructor>
        
        <method id="logInfo" params="text">
            <![CDATA[
                this.log( text, INFO  );
            ]]>
        </method>
        
        <method id="logDebug" params="text">
            <![CDATA[
                this.log( text, DEBUG  );
            ]]>
        </method>
        
        <method id="logError" params="text">
            <![CDATA[
                this.log( text, ERROR  );
            ]]>
        </method>
        
        <method id="logWarning" params="text">
            <![CDATA[
                this.log( text, WARNING  );
            ]]>
        </method>
        
        <method id="clear">
            <![CDATA[
                this.messageList = new Array();
            ]]>
        </method>
        
        <method id="log" params="text, type">
            <![CDATA[
                var message = new LogMessage( type, text, new Date() );
                
                // add log message to message list
                this.messageList.push( message );
                
                // send log message to all of the loggers listeners
                var next = null;
                var listeners = this.listenerList.slice( 0 );
            
                for( var j = 0; j < listeners.length; j++ )
                {
                    next = listeners[j];
                    
                    if( "onLog" in next )
                        next.onLog( message );
                }
            ]]>
        </method>
        
        <method id="addListener" params="listener">
            <![CDATA[
                this.listenerList.push( listener );
            ]]>
        </method>
        
        <method id="removeListener" params="listener">
            <![CDATA[
                var numListeners = this.listenerList.length;
            
                for( var j = 0, i = 0; j < numListeners; j++, i++ )
                {
                    if( this.listenerList[i] === listener )
                        this.listenerList.splice( i--, 1 );
                }
            ]]>
        </method>
        
        <method id="getMessages">
            <![CDATA[
                return this.messageList;
            ]]>
        </method>
    </class>
    
    <class id="LogMessage">
        <field id="type"/>
        <field id="text"/>
        <field id="when"/>
        
        <constructor params="type, text, when">
            <![CDATA[
                this.type = type;
                this.text = text;
                this.when = when; 
            ]]>
        </constructor>
    </class>

</module>
