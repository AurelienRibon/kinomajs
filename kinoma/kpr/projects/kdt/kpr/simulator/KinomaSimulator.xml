<!--
|     Copyright (C) 2010-2016 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<shell xmlns="http://www.kinoma.com/kpr/1">
    <![CDATA[
        var SimulatorDebugBehavior = require( "kdt/simulator/SimulatorDebugBehavior" );
        var Logger = require( "kdt/core/Logger" );
        
        /*
        var CONTROL_THEME = require( "kdt/simulator/themes/flat/theme" );
        var THEME = require( "kdt/simulator/themes/sample/theme" );

        // merge the mobile and control library themes
        for( var i in CONTROL_THEME )
            THEME[i] = CONTROL_THEME[i];
        */
        
        var getBehavior = function() {
        	return shell.behavior;
        }

        var getPreferences = function() {
            return getBehavior().getPreferences();
        }

        // create mockup simulator class
        var MockupSimulatorBehavior = function() {
            SimulatorDebugBehavior.SimulatorDebugBehavior.call( this );
        };
        MockupSimulatorBehavior.prototype = Object.create( SimulatorDebugBehavior.SimulatorDebugBehavior.prototype, {
            getUploadPath: { value: 
                function() {
                    return mergeURI( Files.preferencesDirectory, "kdt/simulator/cache" );
                }
            }
        });

        // create the simulator behavior object
        shell.behavior = new MockupSimulatorBehavior();
        
        // initialize the debug behavior
        shell.delegate( "initialize" );
        
        // start the http server to accept debug messages
        var shareConfig = shell.delegate( "getShareConfig" );
        
        shell.share( shareConfig != null ? shareConfig : {} );
        shell.delegate( "onLaunch" );
    ]]>
</shell>
