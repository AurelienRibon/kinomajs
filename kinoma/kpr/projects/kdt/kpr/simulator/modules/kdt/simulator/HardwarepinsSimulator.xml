<!--
|     Copyright (C) 2010-2015 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <!-- interface behavior for hardwarepins simulator -->
    <require id="PinsSimulators" path="../../PinsSimulators" />

    <behavior id="DefaultPartBehavior" like="PinsSimulators.PartColumnBehavior">
        <field id="data" />
        <field id="content" />
        <field id="callback" />
        <field id="requestTimerMap" />
        <field id="nextTimerId" value="1"/>
        <field id="context" />
        <method id="onCreate" params="content, data">
            <![CDATA[
                PinsSimulators.PartColumnBehavior.prototype.onCreate.call( this, content, data )
            
                this.content = content;
                this.data = data;
                this.requestTimerMap = new Object();
                this.context = new Object();
            ]]>
        </method>
        <method id="getParametersFromMessage" params="message">
            <![CDATA[
                return message.requestText != null ? JSON.parse( message.requestText ) : new Object();
            ]]>
        </method>
        <method id="createInputResult" params="parameters">
            <![CDATA[
                return null;
            ]]>
        </method>
        <method id="createPollingInputResult" params="parameters">
            <![CDATA[
                return this.createInputResult( parameters );
            ]]>
        </method>
        <method id="get" params="content, message">
            <![CDATA[
                var result = content.delegate( "createInputResult", this.getParametersFromMessage( message ) );
                
                if( result != null )
                    message.responseText = JSON.stringify( value );
            ]]>
        </method>
        <method id="poll" params="content, message">
            <![CDATA[
                var query = parseQuery( message.query );
                var callback = "callback" in query ? query.callback : null;
                var seconds = "seconds" in query ? parseInt( query.seconds ) : 0;
                var mseconds = "mseconds" in query ? parseInt( query.mseconds ) : 0;
                var interval = (seconds * 1000) + mseconds; 
                var context = new Object();

                // add the request parameters to the context
                context.parameters = this.getParametersFromMessage( message );
                context.simulator = content;
                context.callback = callback;
                context.interval = interval;

                // create a new polling timer time object
                var timer = new PollingTimer( context );

                // add the timer to the simulator control
                this.content.add( timer );

                // add the timer to the timer map
                var timerId = this.nextTimerId++;
                
                // add the timer to the timer map so we can remove it later
                this.requestTimerMap[timerId] = timer;
                
                // create the repeat event message response
                message.responseText = JSON.stringify( { id:timerId } );
            ]]>
        </method>
        <method id="stop" params="content, message">
            <![CDATA[
                var query = parseQuery( message.query );
                
                if( "id" in query && query.id in this.requestTimerMap )
                {
                    var timer = this.requestTimerMap[query.id];
                    
                    if( timer != null )
                        this.content.remove( timer );
                        
                    delete this.requestTimerMap[query.id];
                }
            ]]>
        </method>
    </behavior>

    <content id="PollingTimer">
        <behavior>
            <field id="context" />
            <method id="onCreate" params="content, context">
                <![CDATA[
                    this.context = context;
	                
	                content.interval = context.interval > 0 ? context.interval : 100;
	                content.start();
                ]]>
            </method>
	        <method id="onTimeChanged" params="content">
	            <![CDATA[
	                var result = this.context.simulator.delegate( "createPollingInputResult", this.context.parameters );
	                
	                if( this.context.callback != null && result != null )
	                {
	                    var message = new Message( this.context.callback );
	                
	                    message.requestObject = result;
	                        
	                    this.context.simulator.invoke( message );
	                }
	            ]]>
	        </method>
        </behavior>
    </content>
    
    <!-- simulator device default implementation -->
    <require id="SimulatorDevice" path="SimulatorDevice" />

    <class id="HardwarepinsSimulatorDevice" like="SimulatorDevice">
        <constructor params="info">
            <![CDATA[
                SimulatorDevice.SimulatorDevice.call( this, info );
            ]]>
        </constructor>
        
        <method id="createDeviceContainerContent" params="data">
            <![CDATA[
                return new HardwarepinsDeviceContainer( data );
            ]]>
        </method>
    </class>
    
    <behavior id="HardwarepinsSimulatorDeviceBehavior" like="SimulatorDevice.DeviceBehavior">
        <field id="simulatorMap" />
        <method id="createContent">
            <![CDATA[
                // remove the old background container if one exists
                if( this.backgroundContainer != null ) 
                {
                    this.container.deviceContainer.remove( this.backgroundContainer );
                    this.backgroundContainer = null;    
                }    
            
                // create the new background container and screen and add it to the
                // device simulator container...
                this.backgroundContainer = this.createBackground();

                this.screen = this.createDeviceScreen();
                this.screen.clip = true;

                this.backgroundContainer.add( this.screen );

                this.container.deviceContainer.add( this.backgroundContainer );
                
                this.addContentToContainer( this.container.deviceContainer );
            ]]>
        </method>
        <method id="handleShellMessage" params="content, message">
            <![CDATA[
                if( message.path == "/device/hardwarepins/register" )
                    this.handleRegisterHardwarepinsSimulator( content, message );
                    
                else if( message.path == "/device/hardwarepins/event" )
                    this.handleHardwarepinsSimulatorEvent( content, message );
                    
                else if( message.path == "/orientation" )
                {
	                var params = parseQuery( message.query );
	                
	                if( "value" in params )
	                    this.handleSetOrientation( content, params.value, getBehavior().getApplicationContainer() );
                }
                    
                else
                    SimulatorDevice.DeviceBehavior.prototype.handleShellMessage.call( this, content, message );
            ]]>
        </method>
        <method id="handleRegisterHardwarepinsSimulator" params="content, message">
            <![CDATA[
                var params = parseQuery( message.query );
                var config = message.requestText != null ? JSON.parse( message.requestText ) : null;
                var simulator = require( params._uri );
                var simulatorId = params._simulatorId;
                var data = simulator.createHardwarepinsSimulatorPartData( config, simulatorId );
    
                if( data != null )
                {
	                // add the settings parent container to the settins column
	                var part = content.simulatorPartsContainer.scroller.delegate( "addPart", data );
	                
	                // create the simulator map if needed
	                if( this.simulatorMap == null )
	                   this.simulatorMap = new Object();
	                   
	                // add the new simulator isntance to the simulator map
	                this.simulatorMap[params._id] = part;
	                
	                // if we are registering the first simulator then set the
	                // position of the parts container so that it is visible
	                if( this.getSimulatorCount() == 1 )
	                   content.simulatorPartsContainer.x = 0;
	            }
	            else
	               throw new Error( "Could not create simulator part data for '" + simulatorId + "'..." );
            ]]>
        </method>
        <method id="handleHardwarepinsSimulatorEvent" params="content, message">
            <![CDATA[
                var params = parseQuery( message.query );
                var instance = this.getInstance( params._id  );
            
                if( instance != null )
                    instance.delegate( params._event, message );
            ]]>
        </method>
        <method id="getInstance" params="id">
            <![CDATA[
                return this.simulatorMap != null && id in this.simulatorMap ? this.simulatorMap[id] : null;
            ]]>
        </method>
        <method id="getSimulatorCount">
            <![CDATA[
                var count = 0;
            
                for( var next in this.simulatorMap )
                    count++;
                    
                return count;
            ]]>
        </method>
    </behavior>

    <private>
        <texture id="HeaderTexture" small="hwps-header.png" />
    
	    <line id="HardwarepinsDeviceContainer" top="0" left="0" bottom="0" right="0" behavior="HardwarepinsSimulatorDeviceBehavior">
	        <column name="simulatorPartsContainer" top="0" left="-310" bottom="0" width="360" clip="true">
                <skin color="white"/>
                <content top="0" left="0">
                    <skin texture="HeaderTexture" width="600" height="68" x="0" y="0"/>
                </content>
                <scroller name="scroller" top="0" bottom="0" width="360-20" clip="true" like="PinsSimulators.PartsScroller"/>
            </column>
            
	        <container top="0" left="0" bottom="0" right="0" name="deviceContainer" clip="true">
	        </container>
	    </line>
    </private>

</module>
