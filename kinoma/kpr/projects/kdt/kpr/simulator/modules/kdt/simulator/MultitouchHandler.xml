<!--
|     Copyright (C) 2010-2015 Marvell International Ltd.
|     Copyright (C) 2002-2010 Kinoma, Inc.
|
|     Licensed under the Apache License, Version 2.0 (the "License");
|     you may not use this file except in compliance with the License.
|     You may obtain a copy of the License at
|
|      http://www.apache.org/licenses/LICENSE-2.0
|
|     Unless required by applicable law or agreed to in writing, software
|     distributed under the License is distributed on an "AS IS" BASIS,
|     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
|     See the License for the specific language governing permissions and
|     limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">
    
    <require id="DeviceManager" path="DeviceManager"/>
    
    <script>
        <![CDATA[
			var TOUCH_IMAGE_URL = mergeURI( module.uri, "fingerprint.png");
			
			// create the touch image effect
			var TOUCH_IMAGE_EFFECTS = new Array();
			
			TOUCH_IMAGE_EFFECTS[0] = new Effect();
			TOUCH_IMAGE_EFFECTS[0].colorize( "gray" );
			TOUCH_IMAGE_EFFECTS[0].innerGlow( "#00FFFF", 0.5, 1, 1 );

			TOUCH_IMAGE_EFFECTS[1] = new Effect();
			TOUCH_IMAGE_EFFECTS[1].colorize( "gray" );
			TOUCH_IMAGE_EFFECTS[1].innerGlow( "#FFFF00", 0.5, 1, 1 );

			TOUCH_IMAGE_EFFECTS[2] = new Effect();
			TOUCH_IMAGE_EFFECTS[2].colorize( "gray" );
			TOUCH_IMAGE_EFFECTS[2].innerGlow( "#FF0000", 0.5, 1, .3 );
			
			TOUCH_IMAGE_EFFECTS[3] = new Effect();
			TOUCH_IMAGE_EFFECTS[3].colorize( "gray" );
			TOUCH_IMAGE_EFFECTS[3].innerGlow( "#0000FF", 0.5, 1, .3 );
        ]]>
    </script>
    
    <function id="newInstance" params="container, touchSupport">
        <![CDATA[
            return new MultitouchHandler( container, touchSupport );
        ]]>
    </function>
    
    <class id="MultitouchHandler">
        <field id="container"/>
        <field id="touchSupport"/>
        <field id="touchPointLayer"/>
        <field id="touchPointMap"/>
        
        <constructor params="container, touchSupport">
            <![CDATA[
                this.container = container;
                this.touchSupport = touchSupport;
            ]]>
        </constructor>
        
        <method id="start">
            <![CDATA[
                this.touchPointMap = new Object();
                
                this.touchPointLayer = new Container( { top:0, left:0, bottom:0, right:0 } );
                
                this.container.add( this.touchPointLayer );
            ]]>
        </method>
        
        <method id="stop">
            <![CDATA[
                for( var next in this.touchPointMap )
                    this.removeTouchPoint( next );
            
                this.container.remove( this.touchPointLayer );
            
                this.touchPointMap = null;
            ]]>
        </method>
        
        <method id="onTouchBegan" params="target, id, x, y">
            <![CDATA[
                if( id == 0 || this.touchSupport == DeviceManager.MULTI )
                {
                    // first remove the old touch point if it already exists
                    this.removeTouchPoint( id );
                    
                    // create the new touch point and add it to the the
                    // touch point map and container
                    var touchPoint = new Picture( {left: x - 20, top:  y - 20}, TOUCH_IMAGE_URL );

                    touchPoint.effect = TOUCH_IMAGE_EFFECTS[id % TOUCH_IMAGE_EFFECTS.length];
                    touchPoint.opacity = 0.75;

                    this.touchPointMap[id] = touchPoint;
                        
                    this.touchPointLayer.add( touchPoint );
                }
            ]]>
        </method>
        
        <method id="onTouchEnded" params="target, id, x, y">
            <![CDATA[
                this.removeTouchPoint( id );
            ]]>
        </method>
        
        <method id="onTouchMoved" params="target, id, x, y">
            <![CDATA[
                if( id in this.touchPointMap )
                {
                    var touchPoint = this.touchPointMap[id];
                
                    touchPoint.position = { x: x - 20, y: y - 20 };
                }
            ]]>
        </method>
        
        <method id="removeTouchPoint" params="id">
            <![CDATA[
                if( id in this.touchPointMap )
                {
                    var touchPoint = this.touchPointMap[id];
                    
                    this.touchPointLayer.remove( touchPoint );
                    
                    delete this.touchPointMap[id];
                }
            ]]>
        </method>
    </class>

</module>
